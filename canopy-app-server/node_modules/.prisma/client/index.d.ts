
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Buyer
 * 
 */
export type Buyer = $Result.DefaultSelection<Prisma.$BuyerPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model Canopy
 * 
 */
export type Canopy = $Result.DefaultSelection<Prisma.$CanopyPayload>
/**
 * Model Control
 * 
 */
export type Control = $Result.DefaultSelection<Prisma.$ControlPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.buyer`: Exposes CRUD operations for the **Buyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buyers
    * const buyers = await prisma.buyer.findMany()
    * ```
    */
  get buyer(): Prisma.BuyerDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.canopy`: Exposes CRUD operations for the **Canopy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Canopies
    * const canopies = await prisma.canopy.findMany()
    * ```
    */
  get canopy(): Prisma.CanopyDelegate<ExtArgs>;

  /**
   * `prisma.control`: Exposes CRUD operations for the **Control** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Controls
    * const controls = await prisma.control.findMany()
    * ```
    */
  get control(): Prisma.ControlDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    Buyer: 'Buyer',
    Location: 'Location',
    Canopy: 'Canopy',
    Control: 'Control'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "admin" | "buyer" | "location" | "canopy" | "control"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Buyer: {
        payload: Prisma.$BuyerPayload<ExtArgs>
        fields: Prisma.BuyerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findFirst: {
            args: Prisma.BuyerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          findMany: {
            args: Prisma.BuyerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>[]
          }
          create: {
            args: Prisma.BuyerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          createMany: {
            args: Prisma.BuyerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BuyerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          update: {
            args: Prisma.BuyerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          deleteMany: {
            args: Prisma.BuyerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BuyerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyerPayload>
          }
          aggregate: {
            args: Prisma.BuyerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyer>
          }
          groupBy: {
            args: Prisma.BuyerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyerGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyerCountArgs<ExtArgs>
            result: $Utils.Optional<BuyerCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      Canopy: {
        payload: Prisma.$CanopyPayload<ExtArgs>
        fields: Prisma.CanopyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CanopyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CanopyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload>
          }
          findFirst: {
            args: Prisma.CanopyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CanopyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload>
          }
          findMany: {
            args: Prisma.CanopyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload>[]
          }
          create: {
            args: Prisma.CanopyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload>
          }
          createMany: {
            args: Prisma.CanopyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CanopyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload>
          }
          update: {
            args: Prisma.CanopyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload>
          }
          deleteMany: {
            args: Prisma.CanopyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CanopyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CanopyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CanopyPayload>
          }
          aggregate: {
            args: Prisma.CanopyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCanopy>
          }
          groupBy: {
            args: Prisma.CanopyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CanopyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CanopyCountArgs<ExtArgs>
            result: $Utils.Optional<CanopyCountAggregateOutputType> | number
          }
        }
      }
      Control: {
        payload: Prisma.$ControlPayload<ExtArgs>
        fields: Prisma.ControlFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ControlFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ControlFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          findFirst: {
            args: Prisma.ControlFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ControlFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          findMany: {
            args: Prisma.ControlFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>[]
          }
          create: {
            args: Prisma.ControlCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          createMany: {
            args: Prisma.ControlCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ControlDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          update: {
            args: Prisma.ControlUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          deleteMany: {
            args: Prisma.ControlDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ControlUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ControlUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ControlPayload>
          }
          aggregate: {
            args: Prisma.ControlAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControl>
          }
          groupBy: {
            args: Prisma.ControlGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControlGroupByOutputType>[]
          }
          count: {
            args: Prisma.ControlCountArgs<ExtArgs>
            result: $Utils.Optional<ControlCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BuyerCountOutputType
   */

  export type BuyerCountOutputType = {
    canopies: number
    controls: number
  }

  export type BuyerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopies?: boolean | BuyerCountOutputTypeCountCanopiesArgs
    controls?: boolean | BuyerCountOutputTypeCountControlsArgs
  }

  // Custom InputTypes
  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerCountOutputType
     */
    select?: BuyerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountCanopiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CanopyWhereInput
  }

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountControlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    canopies: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopies?: boolean | LocationCountOutputTypeCountCanopiesArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountCanopiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CanopyWhereInput
  }


  /**
   * Count Type CanopyCountOutputType
   */

  export type CanopyCountOutputType = {
    controls: number
  }

  export type CanopyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    controls?: boolean | CanopyCountOutputTypeCountControlsArgs
  }

  // Custom InputTypes
  /**
   * CanopyCountOutputType without action
   */
  export type CanopyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CanopyCountOutputType
     */
    select?: CanopyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CanopyCountOutputType without action
   */
  export type CanopyCountOutputTypeCountControlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    name: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    name: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    user_id: number
    password: number
    name: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    name?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    name?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    name?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    user_id: string
    password: string
    name: string
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    password?: boolean
    name?: boolean
  }, ExtArgs["result"]["admin"]>


  export type AdminSelectScalar = {
    id?: boolean
    user_id?: boolean
    password?: boolean
    name?: boolean
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      password: string
      name: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'Int'>
    readonly user_id: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly name: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }


  /**
   * Model Buyer
   */

  export type AggregateBuyer = {
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  export type BuyerAvgAggregateOutputType = {
    id: number | null
  }

  export type BuyerSumAggregateOutputType = {
    id: number | null
  }

  export type BuyerMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    region: string | null
    supervisor_name: string | null
    supervisor_phone: string | null
  }

  export type BuyerMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    region: string | null
    supervisor_name: string | null
    supervisor_phone: string | null
  }

  export type BuyerCountAggregateOutputType = {
    id: number
    user_id: number
    password: number
    region: number
    supervisor_name: number
    supervisor_phone: number
    _all: number
  }


  export type BuyerAvgAggregateInputType = {
    id?: true
  }

  export type BuyerSumAggregateInputType = {
    id?: true
  }

  export type BuyerMinAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    region?: true
    supervisor_name?: true
    supervisor_phone?: true
  }

  export type BuyerMaxAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    region?: true
    supervisor_name?: true
    supervisor_phone?: true
  }

  export type BuyerCountAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    region?: true
    supervisor_name?: true
    supervisor_phone?: true
    _all?: true
  }

  export type BuyerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyer to aggregate.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Buyers
    **/
    _count?: true | BuyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerMaxAggregateInputType
  }

  export type GetBuyerAggregateType<T extends BuyerAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyer[P]>
      : GetScalarType<T[P], AggregateBuyer[P]>
  }




  export type BuyerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyerWhereInput
    orderBy?: BuyerOrderByWithAggregationInput | BuyerOrderByWithAggregationInput[]
    by: BuyerScalarFieldEnum[] | BuyerScalarFieldEnum
    having?: BuyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerCountAggregateInputType | true
    _avg?: BuyerAvgAggregateInputType
    _sum?: BuyerSumAggregateInputType
    _min?: BuyerMinAggregateInputType
    _max?: BuyerMaxAggregateInputType
  }

  export type BuyerGroupByOutputType = {
    id: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  type GetBuyerGroupByPayload<T extends BuyerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerGroupByOutputType[P]>
        }
      >
    >


  export type BuyerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    password?: boolean
    region?: boolean
    supervisor_name?: boolean
    supervisor_phone?: boolean
    canopies?: boolean | Buyer$canopiesArgs<ExtArgs>
    controls?: boolean | Buyer$controlsArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyer"]>


  export type BuyerSelectScalar = {
    id?: boolean
    user_id?: boolean
    password?: boolean
    region?: boolean
    supervisor_name?: boolean
    supervisor_phone?: boolean
  }

  export type BuyerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopies?: boolean | Buyer$canopiesArgs<ExtArgs>
    controls?: boolean | Buyer$controlsArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BuyerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Buyer"
    objects: {
      canopies: Prisma.$CanopyPayload<ExtArgs>[]
      controls: Prisma.$ControlPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      password: string
      region: string
      supervisor_name: string
      supervisor_phone: string
    }, ExtArgs["result"]["buyer"]>
    composites: {}
  }

  type BuyerGetPayload<S extends boolean | null | undefined | BuyerDefaultArgs> = $Result.GetResult<Prisma.$BuyerPayload, S>

  type BuyerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BuyerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BuyerCountAggregateInputType | true
    }

  export interface BuyerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Buyer'], meta: { name: 'Buyer' } }
    /**
     * Find zero or one Buyer that matches the filter.
     * @param {BuyerFindUniqueArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyerFindUniqueArgs>(args: SelectSubset<T, BuyerFindUniqueArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Buyer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BuyerFindUniqueOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyerFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Buyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyerFindFirstArgs>(args?: SelectSubset<T, BuyerFindFirstArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Buyer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindFirstOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyerFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyerFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Buyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buyers
     * const buyers = await prisma.buyer.findMany()
     * 
     * // Get first 10 Buyers
     * const buyers = await prisma.buyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerWithIdOnly = await prisma.buyer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BuyerFindManyArgs>(args?: SelectSubset<T, BuyerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Buyer.
     * @param {BuyerCreateArgs} args - Arguments to create a Buyer.
     * @example
     * // Create one Buyer
     * const Buyer = await prisma.buyer.create({
     *   data: {
     *     // ... data to create a Buyer
     *   }
     * })
     * 
     */
    create<T extends BuyerCreateArgs>(args: SelectSubset<T, BuyerCreateArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Buyers.
     * @param {BuyerCreateManyArgs} args - Arguments to create many Buyers.
     * @example
     * // Create many Buyers
     * const buyer = await prisma.buyer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyerCreateManyArgs>(args?: SelectSubset<T, BuyerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Buyer.
     * @param {BuyerDeleteArgs} args - Arguments to delete one Buyer.
     * @example
     * // Delete one Buyer
     * const Buyer = await prisma.buyer.delete({
     *   where: {
     *     // ... filter to delete one Buyer
     *   }
     * })
     * 
     */
    delete<T extends BuyerDeleteArgs>(args: SelectSubset<T, BuyerDeleteArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Buyer.
     * @param {BuyerUpdateArgs} args - Arguments to update one Buyer.
     * @example
     * // Update one Buyer
     * const buyer = await prisma.buyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyerUpdateArgs>(args: SelectSubset<T, BuyerUpdateArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Buyers.
     * @param {BuyerDeleteManyArgs} args - Arguments to filter Buyers to delete.
     * @example
     * // Delete a few Buyers
     * const { count } = await prisma.buyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyerDeleteManyArgs>(args?: SelectSubset<T, BuyerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buyers
     * const buyer = await prisma.buyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyerUpdateManyArgs>(args: SelectSubset<T, BuyerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Buyer.
     * @param {BuyerUpsertArgs} args - Arguments to update or create a Buyer.
     * @example
     * // Update or create a Buyer
     * const buyer = await prisma.buyer.upsert({
     *   create: {
     *     // ... data to create a Buyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buyer we want to update
     *   }
     * })
     */
    upsert<T extends BuyerUpsertArgs>(args: SelectSubset<T, BuyerUpsertArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerCountArgs} args - Arguments to filter Buyers to count.
     * @example
     * // Count the number of Buyers
     * const count = await prisma.buyer.count({
     *   where: {
     *     // ... the filter for the Buyers we want to count
     *   }
     * })
    **/
    count<T extends BuyerCountArgs>(
      args?: Subset<T, BuyerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerAggregateArgs>(args: Subset<T, BuyerAggregateArgs>): Prisma.PrismaPromise<GetBuyerAggregateType<T>>

    /**
     * Group by Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyerGroupByArgs['orderBy'] }
        : { orderBy?: BuyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Buyer model
   */
  readonly fields: BuyerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Buyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    canopies<T extends Buyer$canopiesArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$canopiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findMany"> | Null>
    controls<T extends Buyer$controlsArgs<ExtArgs> = {}>(args?: Subset<T, Buyer$controlsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Buyer model
   */ 
  interface BuyerFieldRefs {
    readonly id: FieldRef<"Buyer", 'Int'>
    readonly user_id: FieldRef<"Buyer", 'String'>
    readonly password: FieldRef<"Buyer", 'String'>
    readonly region: FieldRef<"Buyer", 'String'>
    readonly supervisor_name: FieldRef<"Buyer", 'String'>
    readonly supervisor_phone: FieldRef<"Buyer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Buyer findUnique
   */
  export type BuyerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer findUniqueOrThrow
   */
  export type BuyerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer findFirst
   */
  export type BuyerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer findFirstOrThrow
   */
  export type BuyerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyer to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer findMany
   */
  export type BuyerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter, which Buyers to fetch.
     */
    where?: BuyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Buyers to fetch.
     */
    orderBy?: BuyerOrderByWithRelationInput | BuyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Buyers.
     */
    cursor?: BuyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Buyers.
     */
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * Buyer create
   */
  export type BuyerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to create a Buyer.
     */
    data: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
  }

  /**
   * Buyer createMany
   */
  export type BuyerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Buyers.
     */
    data: BuyerCreateManyInput | BuyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Buyer update
   */
  export type BuyerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The data needed to update a Buyer.
     */
    data: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
    /**
     * Choose, which Buyer to update.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer updateMany
   */
  export type BuyerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Buyers.
     */
    data: XOR<BuyerUpdateManyMutationInput, BuyerUncheckedUpdateManyInput>
    /**
     * Filter which Buyers to update
     */
    where?: BuyerWhereInput
  }

  /**
   * Buyer upsert
   */
  export type BuyerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * The filter to search for the Buyer to update in case it exists.
     */
    where: BuyerWhereUniqueInput
    /**
     * In case the Buyer found by the `where` argument doesn't exist, create a new Buyer with this data.
     */
    create: XOR<BuyerCreateInput, BuyerUncheckedCreateInput>
    /**
     * In case the Buyer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyerUpdateInput, BuyerUncheckedUpdateInput>
  }

  /**
   * Buyer delete
   */
  export type BuyerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    /**
     * Filter which Buyer to delete.
     */
    where: BuyerWhereUniqueInput
  }

  /**
   * Buyer deleteMany
   */
  export type BuyerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Buyers to delete
     */
    where?: BuyerWhereInput
  }

  /**
   * Buyer.canopies
   */
  export type Buyer$canopiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    where?: CanopyWhereInput
    orderBy?: CanopyOrderByWithRelationInput | CanopyOrderByWithRelationInput[]
    cursor?: CanopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * Buyer.controls
   */
  export type Buyer$controlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    where?: ControlWhereInput
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    cursor?: ControlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Buyer without action
   */
  export type BuyerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    region: string | null
    address: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    region: string | null
    address: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    region: number
    address: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    region?: true
    address?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    region?: true
    address?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    region?: true
    address?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    region: string
    address: string
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    region?: boolean
    address?: boolean
    canopies?: boolean | Location$canopiesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>


  export type LocationSelectScalar = {
    id?: boolean
    region?: boolean
    address?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopies?: boolean | Location$canopiesArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      canopies: Prisma.$CanopyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      region: string
      address: string
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    canopies<T extends Location$canopiesArgs<ExtArgs> = {}>(args?: Subset<T, Location$canopiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'Int'>
    readonly region: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.canopies
   */
  export type Location$canopiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    where?: CanopyWhereInput
    orderBy?: CanopyOrderByWithRelationInput | CanopyOrderByWithRelationInput[]
    cursor?: CanopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model Canopy
   */

  export type AggregateCanopy = {
    _count: CanopyCountAggregateOutputType | null
    _avg: CanopyAvgAggregateOutputType | null
    _sum: CanopySumAggregateOutputType | null
    _min: CanopyMinAggregateOutputType | null
    _max: CanopyMaxAggregateOutputType | null
  }

  export type CanopyAvgAggregateOutputType = {
    id: number | null
    location_id: number | null
    buyer_id: number | null
    status_temperature: number | null
  }

  export type CanopySumAggregateOutputType = {
    id: number | null
    location_id: number | null
    buyer_id: number | null
    status_temperature: number | null
  }

  export type CanopyMinAggregateOutputType = {
    id: number | null
    manage_number: string | null
    class_number: string | null
    location_id: number | null
    buyer_id: number | null
    status_fold: boolean | null
    status_motor: boolean | null
    status_led: boolean | null
    status_sound: boolean | null
    status_inform: boolean | null
    status_temperature: number | null
    status_transmit: boolean | null
  }

  export type CanopyMaxAggregateOutputType = {
    id: number | null
    manage_number: string | null
    class_number: string | null
    location_id: number | null
    buyer_id: number | null
    status_fold: boolean | null
    status_motor: boolean | null
    status_led: boolean | null
    status_sound: boolean | null
    status_inform: boolean | null
    status_temperature: number | null
    status_transmit: boolean | null
  }

  export type CanopyCountAggregateOutputType = {
    id: number
    manage_number: number
    class_number: number
    location_id: number
    buyer_id: number
    status_fold: number
    status_motor: number
    status_led: number
    status_sound: number
    status_inform: number
    status_temperature: number
    status_transmit: number
    _all: number
  }


  export type CanopyAvgAggregateInputType = {
    id?: true
    location_id?: true
    buyer_id?: true
    status_temperature?: true
  }

  export type CanopySumAggregateInputType = {
    id?: true
    location_id?: true
    buyer_id?: true
    status_temperature?: true
  }

  export type CanopyMinAggregateInputType = {
    id?: true
    manage_number?: true
    class_number?: true
    location_id?: true
    buyer_id?: true
    status_fold?: true
    status_motor?: true
    status_led?: true
    status_sound?: true
    status_inform?: true
    status_temperature?: true
    status_transmit?: true
  }

  export type CanopyMaxAggregateInputType = {
    id?: true
    manage_number?: true
    class_number?: true
    location_id?: true
    buyer_id?: true
    status_fold?: true
    status_motor?: true
    status_led?: true
    status_sound?: true
    status_inform?: true
    status_temperature?: true
    status_transmit?: true
  }

  export type CanopyCountAggregateInputType = {
    id?: true
    manage_number?: true
    class_number?: true
    location_id?: true
    buyer_id?: true
    status_fold?: true
    status_motor?: true
    status_led?: true
    status_sound?: true
    status_inform?: true
    status_temperature?: true
    status_transmit?: true
    _all?: true
  }

  export type CanopyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Canopy to aggregate.
     */
    where?: CanopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Canopies to fetch.
     */
    orderBy?: CanopyOrderByWithRelationInput | CanopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CanopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Canopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Canopies
    **/
    _count?: true | CanopyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CanopyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CanopySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CanopyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CanopyMaxAggregateInputType
  }

  export type GetCanopyAggregateType<T extends CanopyAggregateArgs> = {
        [P in keyof T & keyof AggregateCanopy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCanopy[P]>
      : GetScalarType<T[P], AggregateCanopy[P]>
  }




  export type CanopyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CanopyWhereInput
    orderBy?: CanopyOrderByWithAggregationInput | CanopyOrderByWithAggregationInput[]
    by: CanopyScalarFieldEnum[] | CanopyScalarFieldEnum
    having?: CanopyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CanopyCountAggregateInputType | true
    _avg?: CanopyAvgAggregateInputType
    _sum?: CanopySumAggregateInputType
    _min?: CanopyMinAggregateInputType
    _max?: CanopyMaxAggregateInputType
  }

  export type CanopyGroupByOutputType = {
    id: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id: number | null
    status_fold: boolean | null
    status_motor: boolean | null
    status_led: boolean | null
    status_sound: boolean | null
    status_inform: boolean | null
    status_temperature: number | null
    status_transmit: boolean | null
    _count: CanopyCountAggregateOutputType | null
    _avg: CanopyAvgAggregateOutputType | null
    _sum: CanopySumAggregateOutputType | null
    _min: CanopyMinAggregateOutputType | null
    _max: CanopyMaxAggregateOutputType | null
  }

  type GetCanopyGroupByPayload<T extends CanopyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CanopyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CanopyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CanopyGroupByOutputType[P]>
            : GetScalarType<T[P], CanopyGroupByOutputType[P]>
        }
      >
    >


  export type CanopySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    manage_number?: boolean
    class_number?: boolean
    location_id?: boolean
    buyer_id?: boolean
    status_fold?: boolean
    status_motor?: boolean
    status_led?: boolean
    status_sound?: boolean
    status_inform?: boolean
    status_temperature?: boolean
    status_transmit?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    buyer?: boolean | Canopy$buyerArgs<ExtArgs>
    controls?: boolean | Canopy$controlsArgs<ExtArgs>
    _count?: boolean | CanopyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["canopy"]>


  export type CanopySelectScalar = {
    id?: boolean
    manage_number?: boolean
    class_number?: boolean
    location_id?: boolean
    buyer_id?: boolean
    status_fold?: boolean
    status_motor?: boolean
    status_led?: boolean
    status_sound?: boolean
    status_inform?: boolean
    status_temperature?: boolean
    status_transmit?: boolean
  }

  export type CanopyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    buyer?: boolean | Canopy$buyerArgs<ExtArgs>
    controls?: boolean | Canopy$controlsArgs<ExtArgs>
    _count?: boolean | CanopyCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CanopyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Canopy"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      buyer: Prisma.$BuyerPayload<ExtArgs> | null
      controls: Prisma.$ControlPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      manage_number: string
      class_number: string
      location_id: number
      buyer_id: number | null
      status_fold: boolean | null
      status_motor: boolean | null
      status_led: boolean | null
      status_sound: boolean | null
      status_inform: boolean | null
      status_temperature: number | null
      status_transmit: boolean | null
    }, ExtArgs["result"]["canopy"]>
    composites: {}
  }

  type CanopyGetPayload<S extends boolean | null | undefined | CanopyDefaultArgs> = $Result.GetResult<Prisma.$CanopyPayload, S>

  type CanopyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CanopyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CanopyCountAggregateInputType | true
    }

  export interface CanopyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Canopy'], meta: { name: 'Canopy' } }
    /**
     * Find zero or one Canopy that matches the filter.
     * @param {CanopyFindUniqueArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CanopyFindUniqueArgs>(args: SelectSubset<T, CanopyFindUniqueArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Canopy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CanopyFindUniqueOrThrowArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CanopyFindUniqueOrThrowArgs>(args: SelectSubset<T, CanopyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Canopy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyFindFirstArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CanopyFindFirstArgs>(args?: SelectSubset<T, CanopyFindFirstArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Canopy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyFindFirstOrThrowArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CanopyFindFirstOrThrowArgs>(args?: SelectSubset<T, CanopyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Canopies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Canopies
     * const canopies = await prisma.canopy.findMany()
     * 
     * // Get first 10 Canopies
     * const canopies = await prisma.canopy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const canopyWithIdOnly = await prisma.canopy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CanopyFindManyArgs>(args?: SelectSubset<T, CanopyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Canopy.
     * @param {CanopyCreateArgs} args - Arguments to create a Canopy.
     * @example
     * // Create one Canopy
     * const Canopy = await prisma.canopy.create({
     *   data: {
     *     // ... data to create a Canopy
     *   }
     * })
     * 
     */
    create<T extends CanopyCreateArgs>(args: SelectSubset<T, CanopyCreateArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Canopies.
     * @param {CanopyCreateManyArgs} args - Arguments to create many Canopies.
     * @example
     * // Create many Canopies
     * const canopy = await prisma.canopy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CanopyCreateManyArgs>(args?: SelectSubset<T, CanopyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Canopy.
     * @param {CanopyDeleteArgs} args - Arguments to delete one Canopy.
     * @example
     * // Delete one Canopy
     * const Canopy = await prisma.canopy.delete({
     *   where: {
     *     // ... filter to delete one Canopy
     *   }
     * })
     * 
     */
    delete<T extends CanopyDeleteArgs>(args: SelectSubset<T, CanopyDeleteArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Canopy.
     * @param {CanopyUpdateArgs} args - Arguments to update one Canopy.
     * @example
     * // Update one Canopy
     * const canopy = await prisma.canopy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CanopyUpdateArgs>(args: SelectSubset<T, CanopyUpdateArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Canopies.
     * @param {CanopyDeleteManyArgs} args - Arguments to filter Canopies to delete.
     * @example
     * // Delete a few Canopies
     * const { count } = await prisma.canopy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CanopyDeleteManyArgs>(args?: SelectSubset<T, CanopyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Canopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Canopies
     * const canopy = await prisma.canopy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CanopyUpdateManyArgs>(args: SelectSubset<T, CanopyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Canopy.
     * @param {CanopyUpsertArgs} args - Arguments to update or create a Canopy.
     * @example
     * // Update or create a Canopy
     * const canopy = await prisma.canopy.upsert({
     *   create: {
     *     // ... data to create a Canopy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Canopy we want to update
     *   }
     * })
     */
    upsert<T extends CanopyUpsertArgs>(args: SelectSubset<T, CanopyUpsertArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Canopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyCountArgs} args - Arguments to filter Canopies to count.
     * @example
     * // Count the number of Canopies
     * const count = await prisma.canopy.count({
     *   where: {
     *     // ... the filter for the Canopies we want to count
     *   }
     * })
    **/
    count<T extends CanopyCountArgs>(
      args?: Subset<T, CanopyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CanopyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Canopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CanopyAggregateArgs>(args: Subset<T, CanopyAggregateArgs>): Prisma.PrismaPromise<GetCanopyAggregateType<T>>

    /**
     * Group by Canopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CanopyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CanopyGroupByArgs['orderBy'] }
        : { orderBy?: CanopyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CanopyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCanopyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Canopy model
   */
  readonly fields: CanopyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Canopy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CanopyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    buyer<T extends Canopy$buyerArgs<ExtArgs> = {}>(args?: Subset<T, Canopy$buyerArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    controls<T extends Canopy$controlsArgs<ExtArgs> = {}>(args?: Subset<T, Canopy$controlsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Canopy model
   */ 
  interface CanopyFieldRefs {
    readonly id: FieldRef<"Canopy", 'Int'>
    readonly manage_number: FieldRef<"Canopy", 'String'>
    readonly class_number: FieldRef<"Canopy", 'String'>
    readonly location_id: FieldRef<"Canopy", 'Int'>
    readonly buyer_id: FieldRef<"Canopy", 'Int'>
    readonly status_fold: FieldRef<"Canopy", 'Boolean'>
    readonly status_motor: FieldRef<"Canopy", 'Boolean'>
    readonly status_led: FieldRef<"Canopy", 'Boolean'>
    readonly status_sound: FieldRef<"Canopy", 'Boolean'>
    readonly status_inform: FieldRef<"Canopy", 'Boolean'>
    readonly status_temperature: FieldRef<"Canopy", 'Float'>
    readonly status_transmit: FieldRef<"Canopy", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Canopy findUnique
   */
  export type CanopyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * Filter, which Canopy to fetch.
     */
    where: CanopyWhereUniqueInput
  }

  /**
   * Canopy findUniqueOrThrow
   */
  export type CanopyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * Filter, which Canopy to fetch.
     */
    where: CanopyWhereUniqueInput
  }

  /**
   * Canopy findFirst
   */
  export type CanopyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * Filter, which Canopy to fetch.
     */
    where?: CanopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Canopies to fetch.
     */
    orderBy?: CanopyOrderByWithRelationInput | CanopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Canopies.
     */
    cursor?: CanopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Canopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Canopies.
     */
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * Canopy findFirstOrThrow
   */
  export type CanopyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * Filter, which Canopy to fetch.
     */
    where?: CanopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Canopies to fetch.
     */
    orderBy?: CanopyOrderByWithRelationInput | CanopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Canopies.
     */
    cursor?: CanopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Canopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Canopies.
     */
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * Canopy findMany
   */
  export type CanopyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * Filter, which Canopies to fetch.
     */
    where?: CanopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Canopies to fetch.
     */
    orderBy?: CanopyOrderByWithRelationInput | CanopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Canopies.
     */
    cursor?: CanopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Canopies.
     */
    skip?: number
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * Canopy create
   */
  export type CanopyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * The data needed to create a Canopy.
     */
    data: XOR<CanopyCreateInput, CanopyUncheckedCreateInput>
  }

  /**
   * Canopy createMany
   */
  export type CanopyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Canopies.
     */
    data: CanopyCreateManyInput | CanopyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Canopy update
   */
  export type CanopyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * The data needed to update a Canopy.
     */
    data: XOR<CanopyUpdateInput, CanopyUncheckedUpdateInput>
    /**
     * Choose, which Canopy to update.
     */
    where: CanopyWhereUniqueInput
  }

  /**
   * Canopy updateMany
   */
  export type CanopyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Canopies.
     */
    data: XOR<CanopyUpdateManyMutationInput, CanopyUncheckedUpdateManyInput>
    /**
     * Filter which Canopies to update
     */
    where?: CanopyWhereInput
  }

  /**
   * Canopy upsert
   */
  export type CanopyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * The filter to search for the Canopy to update in case it exists.
     */
    where: CanopyWhereUniqueInput
    /**
     * In case the Canopy found by the `where` argument doesn't exist, create a new Canopy with this data.
     */
    create: XOR<CanopyCreateInput, CanopyUncheckedCreateInput>
    /**
     * In case the Canopy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CanopyUpdateInput, CanopyUncheckedUpdateInput>
  }

  /**
   * Canopy delete
   */
  export type CanopyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
    /**
     * Filter which Canopy to delete.
     */
    where: CanopyWhereUniqueInput
  }

  /**
   * Canopy deleteMany
   */
  export type CanopyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Canopies to delete
     */
    where?: CanopyWhereInput
  }

  /**
   * Canopy.buyer
   */
  export type Canopy$buyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Buyer
     */
    select?: BuyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyerInclude<ExtArgs> | null
    where?: BuyerWhereInput
  }

  /**
   * Canopy.controls
   */
  export type Canopy$controlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    where?: ControlWhereInput
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    cursor?: ControlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Canopy without action
   */
  export type CanopyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Canopy
     */
    select?: CanopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CanopyInclude<ExtArgs> | null
  }


  /**
   * Model Control
   */

  export type AggregateControl = {
    _count: ControlCountAggregateOutputType | null
    _avg: ControlAvgAggregateOutputType | null
    _sum: ControlSumAggregateOutputType | null
    _min: ControlMinAggregateOutputType | null
    _max: ControlMaxAggregateOutputType | null
  }

  export type ControlAvgAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
  }

  export type ControlSumAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
  }

  export type ControlMinAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
    fold: boolean | null
    motor: boolean | null
    led: boolean | null
    sound: boolean | null
    inform: boolean | null
    timestamp: Date | null
  }

  export type ControlMaxAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
    fold: boolean | null
    motor: boolean | null
    led: boolean | null
    sound: boolean | null
    inform: boolean | null
    timestamp: Date | null
  }

  export type ControlCountAggregateOutputType = {
    id: number
    canopy_id: number
    buyer_id: number
    fold: number
    motor: number
    led: number
    sound: number
    inform: number
    timestamp: number
    _all: number
  }


  export type ControlAvgAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
  }

  export type ControlSumAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
  }

  export type ControlMinAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
    fold?: true
    motor?: true
    led?: true
    sound?: true
    inform?: true
    timestamp?: true
  }

  export type ControlMaxAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
    fold?: true
    motor?: true
    led?: true
    sound?: true
    inform?: true
    timestamp?: true
  }

  export type ControlCountAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
    fold?: true
    motor?: true
    led?: true
    sound?: true
    inform?: true
    timestamp?: true
    _all?: true
  }

  export type ControlAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Control to aggregate.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Controls
    **/
    _count?: true | ControlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ControlAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ControlSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControlMaxAggregateInputType
  }

  export type GetControlAggregateType<T extends ControlAggregateArgs> = {
        [P in keyof T & keyof AggregateControl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControl[P]>
      : GetScalarType<T[P], AggregateControl[P]>
  }




  export type ControlGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ControlWhereInput
    orderBy?: ControlOrderByWithAggregationInput | ControlOrderByWithAggregationInput[]
    by: ControlScalarFieldEnum[] | ControlScalarFieldEnum
    having?: ControlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControlCountAggregateInputType | true
    _avg?: ControlAvgAggregateInputType
    _sum?: ControlSumAggregateInputType
    _min?: ControlMinAggregateInputType
    _max?: ControlMaxAggregateInputType
  }

  export type ControlGroupByOutputType = {
    id: number
    canopy_id: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date
    _count: ControlCountAggregateOutputType | null
    _avg: ControlAvgAggregateOutputType | null
    _sum: ControlSumAggregateOutputType | null
    _min: ControlMinAggregateOutputType | null
    _max: ControlMaxAggregateOutputType | null
  }

  type GetControlGroupByPayload<T extends ControlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControlGroupByOutputType[P]>
            : GetScalarType<T[P], ControlGroupByOutputType[P]>
        }
      >
    >


  export type ControlSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    canopy_id?: boolean
    buyer_id?: boolean
    fold?: boolean
    motor?: boolean
    led?: boolean
    sound?: boolean
    inform?: boolean
    timestamp?: boolean
    canopy?: boolean | CanopyDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["control"]>


  export type ControlSelectScalar = {
    id?: boolean
    canopy_id?: boolean
    buyer_id?: boolean
    fold?: boolean
    motor?: boolean
    led?: boolean
    sound?: boolean
    inform?: boolean
    timestamp?: boolean
  }

  export type ControlInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopy?: boolean | CanopyDefaultArgs<ExtArgs>
    buyer?: boolean | BuyerDefaultArgs<ExtArgs>
  }

  export type $ControlPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Control"
    objects: {
      canopy: Prisma.$CanopyPayload<ExtArgs>
      buyer: Prisma.$BuyerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      canopy_id: number
      buyer_id: number
      fold: boolean
      motor: boolean
      led: boolean
      sound: boolean
      inform: boolean
      timestamp: Date
    }, ExtArgs["result"]["control"]>
    composites: {}
  }

  type ControlGetPayload<S extends boolean | null | undefined | ControlDefaultArgs> = $Result.GetResult<Prisma.$ControlPayload, S>

  type ControlCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ControlFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ControlCountAggregateInputType | true
    }

  export interface ControlDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Control'], meta: { name: 'Control' } }
    /**
     * Find zero or one Control that matches the filter.
     * @param {ControlFindUniqueArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ControlFindUniqueArgs>(args: SelectSubset<T, ControlFindUniqueArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Control that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ControlFindUniqueOrThrowArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ControlFindUniqueOrThrowArgs>(args: SelectSubset<T, ControlFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Control that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlFindFirstArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ControlFindFirstArgs>(args?: SelectSubset<T, ControlFindFirstArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Control that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlFindFirstOrThrowArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ControlFindFirstOrThrowArgs>(args?: SelectSubset<T, ControlFindFirstOrThrowArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Controls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Controls
     * const controls = await prisma.control.findMany()
     * 
     * // Get first 10 Controls
     * const controls = await prisma.control.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controlWithIdOnly = await prisma.control.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ControlFindManyArgs>(args?: SelectSubset<T, ControlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Control.
     * @param {ControlCreateArgs} args - Arguments to create a Control.
     * @example
     * // Create one Control
     * const Control = await prisma.control.create({
     *   data: {
     *     // ... data to create a Control
     *   }
     * })
     * 
     */
    create<T extends ControlCreateArgs>(args: SelectSubset<T, ControlCreateArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Controls.
     * @param {ControlCreateManyArgs} args - Arguments to create many Controls.
     * @example
     * // Create many Controls
     * const control = await prisma.control.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ControlCreateManyArgs>(args?: SelectSubset<T, ControlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Control.
     * @param {ControlDeleteArgs} args - Arguments to delete one Control.
     * @example
     * // Delete one Control
     * const Control = await prisma.control.delete({
     *   where: {
     *     // ... filter to delete one Control
     *   }
     * })
     * 
     */
    delete<T extends ControlDeleteArgs>(args: SelectSubset<T, ControlDeleteArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Control.
     * @param {ControlUpdateArgs} args - Arguments to update one Control.
     * @example
     * // Update one Control
     * const control = await prisma.control.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ControlUpdateArgs>(args: SelectSubset<T, ControlUpdateArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Controls.
     * @param {ControlDeleteManyArgs} args - Arguments to filter Controls to delete.
     * @example
     * // Delete a few Controls
     * const { count } = await prisma.control.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ControlDeleteManyArgs>(args?: SelectSubset<T, ControlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Controls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Controls
     * const control = await prisma.control.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ControlUpdateManyArgs>(args: SelectSubset<T, ControlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Control.
     * @param {ControlUpsertArgs} args - Arguments to update or create a Control.
     * @example
     * // Update or create a Control
     * const control = await prisma.control.upsert({
     *   create: {
     *     // ... data to create a Control
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Control we want to update
     *   }
     * })
     */
    upsert<T extends ControlUpsertArgs>(args: SelectSubset<T, ControlUpsertArgs<ExtArgs>>): Prisma__ControlClient<$Result.GetResult<Prisma.$ControlPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Controls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlCountArgs} args - Arguments to filter Controls to count.
     * @example
     * // Count the number of Controls
     * const count = await prisma.control.count({
     *   where: {
     *     // ... the filter for the Controls we want to count
     *   }
     * })
    **/
    count<T extends ControlCountArgs>(
      args?: Subset<T, ControlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Control.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControlAggregateArgs>(args: Subset<T, ControlAggregateArgs>): Prisma.PrismaPromise<GetControlAggregateType<T>>

    /**
     * Group by Control.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ControlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ControlGroupByArgs['orderBy'] }
        : { orderBy?: ControlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ControlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Control model
   */
  readonly fields: ControlFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Control.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ControlClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    canopy<T extends CanopyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CanopyDefaultArgs<ExtArgs>>): Prisma__CanopyClient<$Result.GetResult<Prisma.$CanopyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    buyer<T extends BuyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BuyerDefaultArgs<ExtArgs>>): Prisma__BuyerClient<$Result.GetResult<Prisma.$BuyerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Control model
   */ 
  interface ControlFieldRefs {
    readonly id: FieldRef<"Control", 'Int'>
    readonly canopy_id: FieldRef<"Control", 'Int'>
    readonly buyer_id: FieldRef<"Control", 'Int'>
    readonly fold: FieldRef<"Control", 'Boolean'>
    readonly motor: FieldRef<"Control", 'Boolean'>
    readonly led: FieldRef<"Control", 'Boolean'>
    readonly sound: FieldRef<"Control", 'Boolean'>
    readonly inform: FieldRef<"Control", 'Boolean'>
    readonly timestamp: FieldRef<"Control", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Control findUnique
   */
  export type ControlFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control findUniqueOrThrow
   */
  export type ControlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control findFirst
   */
  export type ControlFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Controls.
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Controls.
     */
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Control findFirstOrThrow
   */
  export type ControlFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Control to fetch.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Controls.
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Controls.
     */
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Control findMany
   */
  export type ControlFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter, which Controls to fetch.
     */
    where?: ControlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Controls to fetch.
     */
    orderBy?: ControlOrderByWithRelationInput | ControlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Controls.
     */
    cursor?: ControlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Controls.
     */
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * Control create
   */
  export type ControlCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * The data needed to create a Control.
     */
    data: XOR<ControlCreateInput, ControlUncheckedCreateInput>
  }

  /**
   * Control createMany
   */
  export type ControlCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Controls.
     */
    data: ControlCreateManyInput | ControlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Control update
   */
  export type ControlUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * The data needed to update a Control.
     */
    data: XOR<ControlUpdateInput, ControlUncheckedUpdateInput>
    /**
     * Choose, which Control to update.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control updateMany
   */
  export type ControlUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Controls.
     */
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyInput>
    /**
     * Filter which Controls to update
     */
    where?: ControlWhereInput
  }

  /**
   * Control upsert
   */
  export type ControlUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * The filter to search for the Control to update in case it exists.
     */
    where: ControlWhereUniqueInput
    /**
     * In case the Control found by the `where` argument doesn't exist, create a new Control with this data.
     */
    create: XOR<ControlCreateInput, ControlUncheckedCreateInput>
    /**
     * In case the Control was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ControlUpdateInput, ControlUncheckedUpdateInput>
  }

  /**
   * Control delete
   */
  export type ControlDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
    /**
     * Filter which Control to delete.
     */
    where: ControlWhereUniqueInput
  }

  /**
   * Control deleteMany
   */
  export type ControlDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Controls to delete
     */
    where?: ControlWhereInput
  }

  /**
   * Control without action
   */
  export type ControlDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Control
     */
    select?: ControlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ControlInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    password: 'password',
    name: 'name'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const BuyerScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    password: 'password',
    region: 'region',
    supervisor_name: 'supervisor_name',
    supervisor_phone: 'supervisor_phone'
  };

  export type BuyerScalarFieldEnum = (typeof BuyerScalarFieldEnum)[keyof typeof BuyerScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    region: 'region',
    address: 'address'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const CanopyScalarFieldEnum: {
    id: 'id',
    manage_number: 'manage_number',
    class_number: 'class_number',
    location_id: 'location_id',
    buyer_id: 'buyer_id',
    status_fold: 'status_fold',
    status_motor: 'status_motor',
    status_led: 'status_led',
    status_sound: 'status_sound',
    status_inform: 'status_inform',
    status_temperature: 'status_temperature',
    status_transmit: 'status_transmit'
  };

  export type CanopyScalarFieldEnum = (typeof CanopyScalarFieldEnum)[keyof typeof CanopyScalarFieldEnum]


  export const ControlScalarFieldEnum: {
    id: 'id',
    canopy_id: 'canopy_id',
    buyer_id: 'buyer_id',
    fold: 'fold',
    motor: 'motor',
    led: 'led',
    sound: 'sound',
    inform: 'inform',
    timestamp: 'timestamp'
  };

  export type ControlScalarFieldEnum = (typeof ControlScalarFieldEnum)[keyof typeof ControlScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: IntFilter<"Admin"> | number
    user_id?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    name?: StringFilter<"Admin"> | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    password?: StringFilter<"Admin"> | string
    name?: StringFilter<"Admin"> | string
  }, "id" | "user_id">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Admin"> | number
    user_id?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    name?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type BuyerWhereInput = {
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    id?: IntFilter<"Buyer"> | number
    user_id?: StringFilter<"Buyer"> | string
    password?: StringFilter<"Buyer"> | string
    region?: StringFilter<"Buyer"> | string
    supervisor_name?: StringFilter<"Buyer"> | string
    supervisor_phone?: StringFilter<"Buyer"> | string
    canopies?: CanopyListRelationFilter
    controls?: ControlListRelationFilter
  }

  export type BuyerOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
    canopies?: CanopyOrderByRelationAggregateInput
    controls?: ControlOrderByRelationAggregateInput
  }

  export type BuyerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    AND?: BuyerWhereInput | BuyerWhereInput[]
    OR?: BuyerWhereInput[]
    NOT?: BuyerWhereInput | BuyerWhereInput[]
    password?: StringFilter<"Buyer"> | string
    region?: StringFilter<"Buyer"> | string
    supervisor_name?: StringFilter<"Buyer"> | string
    supervisor_phone?: StringFilter<"Buyer"> | string
    canopies?: CanopyListRelationFilter
    controls?: ControlListRelationFilter
  }, "id" | "user_id">

  export type BuyerOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
    _count?: BuyerCountOrderByAggregateInput
    _avg?: BuyerAvgOrderByAggregateInput
    _max?: BuyerMaxOrderByAggregateInput
    _min?: BuyerMinOrderByAggregateInput
    _sum?: BuyerSumOrderByAggregateInput
  }

  export type BuyerScalarWhereWithAggregatesInput = {
    AND?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    OR?: BuyerScalarWhereWithAggregatesInput[]
    NOT?: BuyerScalarWhereWithAggregatesInput | BuyerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Buyer"> | number
    user_id?: StringWithAggregatesFilter<"Buyer"> | string
    password?: StringWithAggregatesFilter<"Buyer"> | string
    region?: StringWithAggregatesFilter<"Buyer"> | string
    supervisor_name?: StringWithAggregatesFilter<"Buyer"> | string
    supervisor_phone?: StringWithAggregatesFilter<"Buyer"> | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: IntFilter<"Location"> | number
    region?: StringFilter<"Location"> | string
    address?: StringFilter<"Location"> | string
    canopies?: CanopyListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
    canopies?: CanopyOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    region?: string
    address?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    canopies?: CanopyListRelationFilter
  }, "id" | "region" | "address">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Location"> | number
    region?: StringWithAggregatesFilter<"Location"> | string
    address?: StringWithAggregatesFilter<"Location"> | string
  }

  export type CanopyWhereInput = {
    AND?: CanopyWhereInput | CanopyWhereInput[]
    OR?: CanopyWhereInput[]
    NOT?: CanopyWhereInput | CanopyWhereInput[]
    id?: IntFilter<"Canopy"> | number
    manage_number?: StringFilter<"Canopy"> | string
    class_number?: StringFilter<"Canopy"> | string
    location_id?: IntFilter<"Canopy"> | number
    buyer_id?: IntNullableFilter<"Canopy"> | number | null
    status_fold?: BoolNullableFilter<"Canopy"> | boolean | null
    status_motor?: BoolNullableFilter<"Canopy"> | boolean | null
    status_led?: BoolNullableFilter<"Canopy"> | boolean | null
    status_sound?: BoolNullableFilter<"Canopy"> | boolean | null
    status_inform?: BoolNullableFilter<"Canopy"> | boolean | null
    status_temperature?: FloatNullableFilter<"Canopy"> | number | null
    status_transmit?: BoolNullableFilter<"Canopy"> | boolean | null
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    buyer?: XOR<BuyerNullableRelationFilter, BuyerWhereInput> | null
    controls?: ControlListRelationFilter
  }

  export type CanopyOrderByWithRelationInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrderInput | SortOrder
    status_fold?: SortOrderInput | SortOrder
    status_motor?: SortOrderInput | SortOrder
    status_led?: SortOrderInput | SortOrder
    status_sound?: SortOrderInput | SortOrder
    status_inform?: SortOrderInput | SortOrder
    status_temperature?: SortOrderInput | SortOrder
    status_transmit?: SortOrderInput | SortOrder
    location?: LocationOrderByWithRelationInput
    buyer?: BuyerOrderByWithRelationInput
    controls?: ControlOrderByRelationAggregateInput
  }

  export type CanopyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    manage_number?: string
    class_number?: string
    AND?: CanopyWhereInput | CanopyWhereInput[]
    OR?: CanopyWhereInput[]
    NOT?: CanopyWhereInput | CanopyWhereInput[]
    location_id?: IntFilter<"Canopy"> | number
    buyer_id?: IntNullableFilter<"Canopy"> | number | null
    status_fold?: BoolNullableFilter<"Canopy"> | boolean | null
    status_motor?: BoolNullableFilter<"Canopy"> | boolean | null
    status_led?: BoolNullableFilter<"Canopy"> | boolean | null
    status_sound?: BoolNullableFilter<"Canopy"> | boolean | null
    status_inform?: BoolNullableFilter<"Canopy"> | boolean | null
    status_temperature?: FloatNullableFilter<"Canopy"> | number | null
    status_transmit?: BoolNullableFilter<"Canopy"> | boolean | null
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    buyer?: XOR<BuyerNullableRelationFilter, BuyerWhereInput> | null
    controls?: ControlListRelationFilter
  }, "id" | "manage_number" | "class_number">

  export type CanopyOrderByWithAggregationInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrderInput | SortOrder
    status_fold?: SortOrderInput | SortOrder
    status_motor?: SortOrderInput | SortOrder
    status_led?: SortOrderInput | SortOrder
    status_sound?: SortOrderInput | SortOrder
    status_inform?: SortOrderInput | SortOrder
    status_temperature?: SortOrderInput | SortOrder
    status_transmit?: SortOrderInput | SortOrder
    _count?: CanopyCountOrderByAggregateInput
    _avg?: CanopyAvgOrderByAggregateInput
    _max?: CanopyMaxOrderByAggregateInput
    _min?: CanopyMinOrderByAggregateInput
    _sum?: CanopySumOrderByAggregateInput
  }

  export type CanopyScalarWhereWithAggregatesInput = {
    AND?: CanopyScalarWhereWithAggregatesInput | CanopyScalarWhereWithAggregatesInput[]
    OR?: CanopyScalarWhereWithAggregatesInput[]
    NOT?: CanopyScalarWhereWithAggregatesInput | CanopyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Canopy"> | number
    manage_number?: StringWithAggregatesFilter<"Canopy"> | string
    class_number?: StringWithAggregatesFilter<"Canopy"> | string
    location_id?: IntWithAggregatesFilter<"Canopy"> | number
    buyer_id?: IntNullableWithAggregatesFilter<"Canopy"> | number | null
    status_fold?: BoolNullableWithAggregatesFilter<"Canopy"> | boolean | null
    status_motor?: BoolNullableWithAggregatesFilter<"Canopy"> | boolean | null
    status_led?: BoolNullableWithAggregatesFilter<"Canopy"> | boolean | null
    status_sound?: BoolNullableWithAggregatesFilter<"Canopy"> | boolean | null
    status_inform?: BoolNullableWithAggregatesFilter<"Canopy"> | boolean | null
    status_temperature?: FloatNullableWithAggregatesFilter<"Canopy"> | number | null
    status_transmit?: BoolNullableWithAggregatesFilter<"Canopy"> | boolean | null
  }

  export type ControlWhereInput = {
    AND?: ControlWhereInput | ControlWhereInput[]
    OR?: ControlWhereInput[]
    NOT?: ControlWhereInput | ControlWhereInput[]
    id?: IntFilter<"Control"> | number
    canopy_id?: IntFilter<"Control"> | number
    buyer_id?: IntFilter<"Control"> | number
    fold?: BoolFilter<"Control"> | boolean
    motor?: BoolFilter<"Control"> | boolean
    led?: BoolFilter<"Control"> | boolean
    sound?: BoolFilter<"Control"> | boolean
    inform?: BoolFilter<"Control"> | boolean
    timestamp?: DateTimeFilter<"Control"> | Date | string
    canopy?: XOR<CanopyRelationFilter, CanopyWhereInput>
    buyer?: XOR<BuyerRelationFilter, BuyerWhereInput>
  }

  export type ControlOrderByWithRelationInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
    canopy?: CanopyOrderByWithRelationInput
    buyer?: BuyerOrderByWithRelationInput
  }

  export type ControlWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ControlWhereInput | ControlWhereInput[]
    OR?: ControlWhereInput[]
    NOT?: ControlWhereInput | ControlWhereInput[]
    canopy_id?: IntFilter<"Control"> | number
    buyer_id?: IntFilter<"Control"> | number
    fold?: BoolFilter<"Control"> | boolean
    motor?: BoolFilter<"Control"> | boolean
    led?: BoolFilter<"Control"> | boolean
    sound?: BoolFilter<"Control"> | boolean
    inform?: BoolFilter<"Control"> | boolean
    timestamp?: DateTimeFilter<"Control"> | Date | string
    canopy?: XOR<CanopyRelationFilter, CanopyWhereInput>
    buyer?: XOR<BuyerRelationFilter, BuyerWhereInput>
  }, "id">

  export type ControlOrderByWithAggregationInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
    _count?: ControlCountOrderByAggregateInput
    _avg?: ControlAvgOrderByAggregateInput
    _max?: ControlMaxOrderByAggregateInput
    _min?: ControlMinOrderByAggregateInput
    _sum?: ControlSumOrderByAggregateInput
  }

  export type ControlScalarWhereWithAggregatesInput = {
    AND?: ControlScalarWhereWithAggregatesInput | ControlScalarWhereWithAggregatesInput[]
    OR?: ControlScalarWhereWithAggregatesInput[]
    NOT?: ControlScalarWhereWithAggregatesInput | ControlScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Control"> | number
    canopy_id?: IntWithAggregatesFilter<"Control"> | number
    buyer_id?: IntWithAggregatesFilter<"Control"> | number
    fold?: BoolWithAggregatesFilter<"Control"> | boolean
    motor?: BoolWithAggregatesFilter<"Control"> | boolean
    led?: BoolWithAggregatesFilter<"Control"> | boolean
    sound?: BoolWithAggregatesFilter<"Control"> | boolean
    inform?: BoolWithAggregatesFilter<"Control"> | boolean
    timestamp?: DateTimeWithAggregatesFilter<"Control"> | Date | string
  }

  export type AdminCreateInput = {
    user_id: string
    password: string
    name: string
  }

  export type AdminUncheckedCreateInput = {
    id?: number
    user_id: string
    password: string
    name: string
  }

  export type AdminUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id?: number
    user_id: string
    password: string
    name: string
  }

  export type AdminUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerCreateInput = {
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopies?: CanopyCreateNestedManyWithoutBuyerInput
    controls?: ControlCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopies?: CanopyUncheckedCreateNestedManyWithoutBuyerInput
    controls?: ControlUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopies?: CanopyUpdateManyWithoutBuyerNestedInput
    controls?: ControlUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopies?: CanopyUncheckedUpdateManyWithoutBuyerNestedInput
    controls?: ControlUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerCreateManyInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
  }

  export type BuyerUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
  }

  export type LocationCreateInput = {
    region: string
    address: string
    canopies?: CanopyCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: number
    region: string
    address: string
    canopies?: CanopyUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    canopies?: CanopyUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    canopies?: CanopyUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: number
    region: string
    address: string
  }

  export type LocationUpdateManyMutationInput = {
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type CanopyCreateInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    location: LocationCreateNestedOneWithoutCanopiesInput
    buyer?: BuyerCreateNestedOneWithoutCanopiesInput
    controls?: ControlCreateNestedManyWithoutCanopyInput
  }

  export type CanopyUncheckedCreateInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    controls?: ControlUncheckedCreateNestedManyWithoutCanopyInput
  }

  export type CanopyUpdateInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    location?: LocationUpdateOneRequiredWithoutCanopiesNestedInput
    buyer?: BuyerUpdateOneWithoutCanopiesNestedInput
    controls?: ControlUpdateManyWithoutCanopyNestedInput
  }

  export type CanopyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    controls?: ControlUncheckedUpdateManyWithoutCanopyNestedInput
  }

  export type CanopyCreateManyInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type CanopyUpdateManyMutationInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type CanopyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ControlCreateInput = {
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
    canopy: CanopyCreateNestedOneWithoutControlsInput
    buyer: BuyerCreateNestedOneWithoutControlsInput
  }

  export type ControlUncheckedCreateInput = {
    id?: number
    canopy_id: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type ControlUpdateInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    canopy?: CanopyUpdateOneRequiredWithoutControlsNestedInput
    buyer?: BuyerUpdateOneRequiredWithoutControlsNestedInput
  }

  export type ControlUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlCreateManyInput = {
    id?: number
    canopy_id: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type ControlUpdateManyMutationInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CanopyListRelationFilter = {
    every?: CanopyWhereInput
    some?: CanopyWhereInput
    none?: CanopyWhereInput
  }

  export type ControlListRelationFilter = {
    every?: ControlWhereInput
    some?: ControlWhereInput
    none?: ControlWhereInput
  }

  export type CanopyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ControlOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyerCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
  }

  export type BuyerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BuyerMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
  }

  export type BuyerMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
  }

  export type BuyerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type BuyerNullableRelationFilter = {
    is?: BuyerWhereInput | null
    isNot?: BuyerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CanopyCountOrderByAggregateInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_fold?: SortOrder
    status_motor?: SortOrder
    status_led?: SortOrder
    status_sound?: SortOrder
    status_inform?: SortOrder
    status_temperature?: SortOrder
    status_transmit?: SortOrder
  }

  export type CanopyAvgOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_temperature?: SortOrder
  }

  export type CanopyMaxOrderByAggregateInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_fold?: SortOrder
    status_motor?: SortOrder
    status_led?: SortOrder
    status_sound?: SortOrder
    status_inform?: SortOrder
    status_temperature?: SortOrder
    status_transmit?: SortOrder
  }

  export type CanopyMinOrderByAggregateInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_fold?: SortOrder
    status_motor?: SortOrder
    status_led?: SortOrder
    status_sound?: SortOrder
    status_inform?: SortOrder
    status_temperature?: SortOrder
    status_transmit?: SortOrder
  }

  export type CanopySumOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_temperature?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CanopyRelationFilter = {
    is?: CanopyWhereInput
    isNot?: CanopyWhereInput
  }

  export type BuyerRelationFilter = {
    is?: BuyerWhereInput
    isNot?: BuyerWhereInput
  }

  export type ControlCountOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
  }

  export type ControlAvgOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
  }

  export type ControlMaxOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
  }

  export type ControlMinOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
  }

  export type ControlSumOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CanopyCreateNestedManyWithoutBuyerInput = {
    create?: XOR<CanopyCreateWithoutBuyerInput, CanopyUncheckedCreateWithoutBuyerInput> | CanopyCreateWithoutBuyerInput[] | CanopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutBuyerInput | CanopyCreateOrConnectWithoutBuyerInput[]
    createMany?: CanopyCreateManyBuyerInputEnvelope
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
  }

  export type ControlCreateNestedManyWithoutBuyerInput = {
    create?: XOR<ControlCreateWithoutBuyerInput, ControlUncheckedCreateWithoutBuyerInput> | ControlCreateWithoutBuyerInput[] | ControlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutBuyerInput | ControlCreateOrConnectWithoutBuyerInput[]
    createMany?: ControlCreateManyBuyerInputEnvelope
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type CanopyUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<CanopyCreateWithoutBuyerInput, CanopyUncheckedCreateWithoutBuyerInput> | CanopyCreateWithoutBuyerInput[] | CanopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutBuyerInput | CanopyCreateOrConnectWithoutBuyerInput[]
    createMany?: CanopyCreateManyBuyerInputEnvelope
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
  }

  export type ControlUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<ControlCreateWithoutBuyerInput, ControlUncheckedCreateWithoutBuyerInput> | ControlCreateWithoutBuyerInput[] | ControlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutBuyerInput | ControlCreateOrConnectWithoutBuyerInput[]
    createMany?: ControlCreateManyBuyerInputEnvelope
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type CanopyUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<CanopyCreateWithoutBuyerInput, CanopyUncheckedCreateWithoutBuyerInput> | CanopyCreateWithoutBuyerInput[] | CanopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutBuyerInput | CanopyCreateOrConnectWithoutBuyerInput[]
    upsert?: CanopyUpsertWithWhereUniqueWithoutBuyerInput | CanopyUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: CanopyCreateManyBuyerInputEnvelope
    set?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    disconnect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    delete?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    update?: CanopyUpdateWithWhereUniqueWithoutBuyerInput | CanopyUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: CanopyUpdateManyWithWhereWithoutBuyerInput | CanopyUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: CanopyScalarWhereInput | CanopyScalarWhereInput[]
  }

  export type ControlUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<ControlCreateWithoutBuyerInput, ControlUncheckedCreateWithoutBuyerInput> | ControlCreateWithoutBuyerInput[] | ControlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutBuyerInput | ControlCreateOrConnectWithoutBuyerInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutBuyerInput | ControlUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: ControlCreateManyBuyerInputEnvelope
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutBuyerInput | ControlUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutBuyerInput | ControlUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type CanopyUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<CanopyCreateWithoutBuyerInput, CanopyUncheckedCreateWithoutBuyerInput> | CanopyCreateWithoutBuyerInput[] | CanopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutBuyerInput | CanopyCreateOrConnectWithoutBuyerInput[]
    upsert?: CanopyUpsertWithWhereUniqueWithoutBuyerInput | CanopyUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: CanopyCreateManyBuyerInputEnvelope
    set?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    disconnect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    delete?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    update?: CanopyUpdateWithWhereUniqueWithoutBuyerInput | CanopyUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: CanopyUpdateManyWithWhereWithoutBuyerInput | CanopyUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: CanopyScalarWhereInput | CanopyScalarWhereInput[]
  }

  export type ControlUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<ControlCreateWithoutBuyerInput, ControlUncheckedCreateWithoutBuyerInput> | ControlCreateWithoutBuyerInput[] | ControlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutBuyerInput | ControlCreateOrConnectWithoutBuyerInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutBuyerInput | ControlUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: ControlCreateManyBuyerInputEnvelope
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutBuyerInput | ControlUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutBuyerInput | ControlUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type CanopyCreateNestedManyWithoutLocationInput = {
    create?: XOR<CanopyCreateWithoutLocationInput, CanopyUncheckedCreateWithoutLocationInput> | CanopyCreateWithoutLocationInput[] | CanopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutLocationInput | CanopyCreateOrConnectWithoutLocationInput[]
    createMany?: CanopyCreateManyLocationInputEnvelope
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
  }

  export type CanopyUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<CanopyCreateWithoutLocationInput, CanopyUncheckedCreateWithoutLocationInput> | CanopyCreateWithoutLocationInput[] | CanopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutLocationInput | CanopyCreateOrConnectWithoutLocationInput[]
    createMany?: CanopyCreateManyLocationInputEnvelope
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
  }

  export type CanopyUpdateManyWithoutLocationNestedInput = {
    create?: XOR<CanopyCreateWithoutLocationInput, CanopyUncheckedCreateWithoutLocationInput> | CanopyCreateWithoutLocationInput[] | CanopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutLocationInput | CanopyCreateOrConnectWithoutLocationInput[]
    upsert?: CanopyUpsertWithWhereUniqueWithoutLocationInput | CanopyUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: CanopyCreateManyLocationInputEnvelope
    set?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    disconnect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    delete?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    update?: CanopyUpdateWithWhereUniqueWithoutLocationInput | CanopyUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: CanopyUpdateManyWithWhereWithoutLocationInput | CanopyUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: CanopyScalarWhereInput | CanopyScalarWhereInput[]
  }

  export type CanopyUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<CanopyCreateWithoutLocationInput, CanopyUncheckedCreateWithoutLocationInput> | CanopyCreateWithoutLocationInput[] | CanopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: CanopyCreateOrConnectWithoutLocationInput | CanopyCreateOrConnectWithoutLocationInput[]
    upsert?: CanopyUpsertWithWhereUniqueWithoutLocationInput | CanopyUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: CanopyCreateManyLocationInputEnvelope
    set?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    disconnect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    delete?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    connect?: CanopyWhereUniqueInput | CanopyWhereUniqueInput[]
    update?: CanopyUpdateWithWhereUniqueWithoutLocationInput | CanopyUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: CanopyUpdateManyWithWhereWithoutLocationInput | CanopyUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: CanopyScalarWhereInput | CanopyScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutCanopiesInput = {
    create?: XOR<LocationCreateWithoutCanopiesInput, LocationUncheckedCreateWithoutCanopiesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutCanopiesInput
    connect?: LocationWhereUniqueInput
  }

  export type BuyerCreateNestedOneWithoutCanopiesInput = {
    create?: XOR<BuyerCreateWithoutCanopiesInput, BuyerUncheckedCreateWithoutCanopiesInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutCanopiesInput
    connect?: BuyerWhereUniqueInput
  }

  export type ControlCreateNestedManyWithoutCanopyInput = {
    create?: XOR<ControlCreateWithoutCanopyInput, ControlUncheckedCreateWithoutCanopyInput> | ControlCreateWithoutCanopyInput[] | ControlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutCanopyInput | ControlCreateOrConnectWithoutCanopyInput[]
    createMany?: ControlCreateManyCanopyInputEnvelope
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type ControlUncheckedCreateNestedManyWithoutCanopyInput = {
    create?: XOR<ControlCreateWithoutCanopyInput, ControlUncheckedCreateWithoutCanopyInput> | ControlCreateWithoutCanopyInput[] | ControlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutCanopyInput | ControlCreateOrConnectWithoutCanopyInput[]
    createMany?: ControlCreateManyCanopyInputEnvelope
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LocationUpdateOneRequiredWithoutCanopiesNestedInput = {
    create?: XOR<LocationCreateWithoutCanopiesInput, LocationUncheckedCreateWithoutCanopiesInput>
    connectOrCreate?: LocationCreateOrConnectWithoutCanopiesInput
    upsert?: LocationUpsertWithoutCanopiesInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutCanopiesInput, LocationUpdateWithoutCanopiesInput>, LocationUncheckedUpdateWithoutCanopiesInput>
  }

  export type BuyerUpdateOneWithoutCanopiesNestedInput = {
    create?: XOR<BuyerCreateWithoutCanopiesInput, BuyerUncheckedCreateWithoutCanopiesInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutCanopiesInput
    upsert?: BuyerUpsertWithoutCanopiesInput
    disconnect?: BuyerWhereInput | boolean
    delete?: BuyerWhereInput | boolean
    connect?: BuyerWhereUniqueInput
    update?: XOR<XOR<BuyerUpdateToOneWithWhereWithoutCanopiesInput, BuyerUpdateWithoutCanopiesInput>, BuyerUncheckedUpdateWithoutCanopiesInput>
  }

  export type ControlUpdateManyWithoutCanopyNestedInput = {
    create?: XOR<ControlCreateWithoutCanopyInput, ControlUncheckedCreateWithoutCanopyInput> | ControlCreateWithoutCanopyInput[] | ControlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutCanopyInput | ControlCreateOrConnectWithoutCanopyInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutCanopyInput | ControlUpsertWithWhereUniqueWithoutCanopyInput[]
    createMany?: ControlCreateManyCanopyInputEnvelope
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutCanopyInput | ControlUpdateWithWhereUniqueWithoutCanopyInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutCanopyInput | ControlUpdateManyWithWhereWithoutCanopyInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ControlUncheckedUpdateManyWithoutCanopyNestedInput = {
    create?: XOR<ControlCreateWithoutCanopyInput, ControlUncheckedCreateWithoutCanopyInput> | ControlCreateWithoutCanopyInput[] | ControlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: ControlCreateOrConnectWithoutCanopyInput | ControlCreateOrConnectWithoutCanopyInput[]
    upsert?: ControlUpsertWithWhereUniqueWithoutCanopyInput | ControlUpsertWithWhereUniqueWithoutCanopyInput[]
    createMany?: ControlCreateManyCanopyInputEnvelope
    set?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    disconnect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    delete?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    connect?: ControlWhereUniqueInput | ControlWhereUniqueInput[]
    update?: ControlUpdateWithWhereUniqueWithoutCanopyInput | ControlUpdateWithWhereUniqueWithoutCanopyInput[]
    updateMany?: ControlUpdateManyWithWhereWithoutCanopyInput | ControlUpdateManyWithWhereWithoutCanopyInput[]
    deleteMany?: ControlScalarWhereInput | ControlScalarWhereInput[]
  }

  export type CanopyCreateNestedOneWithoutControlsInput = {
    create?: XOR<CanopyCreateWithoutControlsInput, CanopyUncheckedCreateWithoutControlsInput>
    connectOrCreate?: CanopyCreateOrConnectWithoutControlsInput
    connect?: CanopyWhereUniqueInput
  }

  export type BuyerCreateNestedOneWithoutControlsInput = {
    create?: XOR<BuyerCreateWithoutControlsInput, BuyerUncheckedCreateWithoutControlsInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutControlsInput
    connect?: BuyerWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CanopyUpdateOneRequiredWithoutControlsNestedInput = {
    create?: XOR<CanopyCreateWithoutControlsInput, CanopyUncheckedCreateWithoutControlsInput>
    connectOrCreate?: CanopyCreateOrConnectWithoutControlsInput
    upsert?: CanopyUpsertWithoutControlsInput
    connect?: CanopyWhereUniqueInput
    update?: XOR<XOR<CanopyUpdateToOneWithWhereWithoutControlsInput, CanopyUpdateWithoutControlsInput>, CanopyUncheckedUpdateWithoutControlsInput>
  }

  export type BuyerUpdateOneRequiredWithoutControlsNestedInput = {
    create?: XOR<BuyerCreateWithoutControlsInput, BuyerUncheckedCreateWithoutControlsInput>
    connectOrCreate?: BuyerCreateOrConnectWithoutControlsInput
    upsert?: BuyerUpsertWithoutControlsInput
    connect?: BuyerWhereUniqueInput
    update?: XOR<XOR<BuyerUpdateToOneWithWhereWithoutControlsInput, BuyerUpdateWithoutControlsInput>, BuyerUncheckedUpdateWithoutControlsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CanopyCreateWithoutBuyerInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    location: LocationCreateNestedOneWithoutCanopiesInput
    controls?: ControlCreateNestedManyWithoutCanopyInput
  }

  export type CanopyUncheckedCreateWithoutBuyerInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    controls?: ControlUncheckedCreateNestedManyWithoutCanopyInput
  }

  export type CanopyCreateOrConnectWithoutBuyerInput = {
    where: CanopyWhereUniqueInput
    create: XOR<CanopyCreateWithoutBuyerInput, CanopyUncheckedCreateWithoutBuyerInput>
  }

  export type CanopyCreateManyBuyerInputEnvelope = {
    data: CanopyCreateManyBuyerInput | CanopyCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type ControlCreateWithoutBuyerInput = {
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
    canopy: CanopyCreateNestedOneWithoutControlsInput
  }

  export type ControlUncheckedCreateWithoutBuyerInput = {
    id?: number
    canopy_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type ControlCreateOrConnectWithoutBuyerInput = {
    where: ControlWhereUniqueInput
    create: XOR<ControlCreateWithoutBuyerInput, ControlUncheckedCreateWithoutBuyerInput>
  }

  export type ControlCreateManyBuyerInputEnvelope = {
    data: ControlCreateManyBuyerInput | ControlCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type CanopyUpsertWithWhereUniqueWithoutBuyerInput = {
    where: CanopyWhereUniqueInput
    update: XOR<CanopyUpdateWithoutBuyerInput, CanopyUncheckedUpdateWithoutBuyerInput>
    create: XOR<CanopyCreateWithoutBuyerInput, CanopyUncheckedCreateWithoutBuyerInput>
  }

  export type CanopyUpdateWithWhereUniqueWithoutBuyerInput = {
    where: CanopyWhereUniqueInput
    data: XOR<CanopyUpdateWithoutBuyerInput, CanopyUncheckedUpdateWithoutBuyerInput>
  }

  export type CanopyUpdateManyWithWhereWithoutBuyerInput = {
    where: CanopyScalarWhereInput
    data: XOR<CanopyUpdateManyMutationInput, CanopyUncheckedUpdateManyWithoutBuyerInput>
  }

  export type CanopyScalarWhereInput = {
    AND?: CanopyScalarWhereInput | CanopyScalarWhereInput[]
    OR?: CanopyScalarWhereInput[]
    NOT?: CanopyScalarWhereInput | CanopyScalarWhereInput[]
    id?: IntFilter<"Canopy"> | number
    manage_number?: StringFilter<"Canopy"> | string
    class_number?: StringFilter<"Canopy"> | string
    location_id?: IntFilter<"Canopy"> | number
    buyer_id?: IntNullableFilter<"Canopy"> | number | null
    status_fold?: BoolNullableFilter<"Canopy"> | boolean | null
    status_motor?: BoolNullableFilter<"Canopy"> | boolean | null
    status_led?: BoolNullableFilter<"Canopy"> | boolean | null
    status_sound?: BoolNullableFilter<"Canopy"> | boolean | null
    status_inform?: BoolNullableFilter<"Canopy"> | boolean | null
    status_temperature?: FloatNullableFilter<"Canopy"> | number | null
    status_transmit?: BoolNullableFilter<"Canopy"> | boolean | null
  }

  export type ControlUpsertWithWhereUniqueWithoutBuyerInput = {
    where: ControlWhereUniqueInput
    update: XOR<ControlUpdateWithoutBuyerInput, ControlUncheckedUpdateWithoutBuyerInput>
    create: XOR<ControlCreateWithoutBuyerInput, ControlUncheckedCreateWithoutBuyerInput>
  }

  export type ControlUpdateWithWhereUniqueWithoutBuyerInput = {
    where: ControlWhereUniqueInput
    data: XOR<ControlUpdateWithoutBuyerInput, ControlUncheckedUpdateWithoutBuyerInput>
  }

  export type ControlUpdateManyWithWhereWithoutBuyerInput = {
    where: ControlScalarWhereInput
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyWithoutBuyerInput>
  }

  export type ControlScalarWhereInput = {
    AND?: ControlScalarWhereInput | ControlScalarWhereInput[]
    OR?: ControlScalarWhereInput[]
    NOT?: ControlScalarWhereInput | ControlScalarWhereInput[]
    id?: IntFilter<"Control"> | number
    canopy_id?: IntFilter<"Control"> | number
    buyer_id?: IntFilter<"Control"> | number
    fold?: BoolFilter<"Control"> | boolean
    motor?: BoolFilter<"Control"> | boolean
    led?: BoolFilter<"Control"> | boolean
    sound?: BoolFilter<"Control"> | boolean
    inform?: BoolFilter<"Control"> | boolean
    timestamp?: DateTimeFilter<"Control"> | Date | string
  }

  export type CanopyCreateWithoutLocationInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    buyer?: BuyerCreateNestedOneWithoutCanopiesInput
    controls?: ControlCreateNestedManyWithoutCanopyInput
  }

  export type CanopyUncheckedCreateWithoutLocationInput = {
    id?: number
    manage_number: string
    class_number: string
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    controls?: ControlUncheckedCreateNestedManyWithoutCanopyInput
  }

  export type CanopyCreateOrConnectWithoutLocationInput = {
    where: CanopyWhereUniqueInput
    create: XOR<CanopyCreateWithoutLocationInput, CanopyUncheckedCreateWithoutLocationInput>
  }

  export type CanopyCreateManyLocationInputEnvelope = {
    data: CanopyCreateManyLocationInput | CanopyCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type CanopyUpsertWithWhereUniqueWithoutLocationInput = {
    where: CanopyWhereUniqueInput
    update: XOR<CanopyUpdateWithoutLocationInput, CanopyUncheckedUpdateWithoutLocationInput>
    create: XOR<CanopyCreateWithoutLocationInput, CanopyUncheckedCreateWithoutLocationInput>
  }

  export type CanopyUpdateWithWhereUniqueWithoutLocationInput = {
    where: CanopyWhereUniqueInput
    data: XOR<CanopyUpdateWithoutLocationInput, CanopyUncheckedUpdateWithoutLocationInput>
  }

  export type CanopyUpdateManyWithWhereWithoutLocationInput = {
    where: CanopyScalarWhereInput
    data: XOR<CanopyUpdateManyMutationInput, CanopyUncheckedUpdateManyWithoutLocationInput>
  }

  export type LocationCreateWithoutCanopiesInput = {
    region: string
    address: string
  }

  export type LocationUncheckedCreateWithoutCanopiesInput = {
    id?: number
    region: string
    address: string
  }

  export type LocationCreateOrConnectWithoutCanopiesInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutCanopiesInput, LocationUncheckedCreateWithoutCanopiesInput>
  }

  export type BuyerCreateWithoutCanopiesInput = {
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    controls?: ControlCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutCanopiesInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    controls?: ControlUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutCanopiesInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutCanopiesInput, BuyerUncheckedCreateWithoutCanopiesInput>
  }

  export type ControlCreateWithoutCanopyInput = {
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
    buyer: BuyerCreateNestedOneWithoutControlsInput
  }

  export type ControlUncheckedCreateWithoutCanopyInput = {
    id?: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type ControlCreateOrConnectWithoutCanopyInput = {
    where: ControlWhereUniqueInput
    create: XOR<ControlCreateWithoutCanopyInput, ControlUncheckedCreateWithoutCanopyInput>
  }

  export type ControlCreateManyCanopyInputEnvelope = {
    data: ControlCreateManyCanopyInput | ControlCreateManyCanopyInput[]
    skipDuplicates?: boolean
  }

  export type LocationUpsertWithoutCanopiesInput = {
    update: XOR<LocationUpdateWithoutCanopiesInput, LocationUncheckedUpdateWithoutCanopiesInput>
    create: XOR<LocationCreateWithoutCanopiesInput, LocationUncheckedCreateWithoutCanopiesInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutCanopiesInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutCanopiesInput, LocationUncheckedUpdateWithoutCanopiesInput>
  }

  export type LocationUpdateWithoutCanopiesInput = {
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUncheckedUpdateWithoutCanopiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type BuyerUpsertWithoutCanopiesInput = {
    update: XOR<BuyerUpdateWithoutCanopiesInput, BuyerUncheckedUpdateWithoutCanopiesInput>
    create: XOR<BuyerCreateWithoutCanopiesInput, BuyerUncheckedCreateWithoutCanopiesInput>
    where?: BuyerWhereInput
  }

  export type BuyerUpdateToOneWithWhereWithoutCanopiesInput = {
    where?: BuyerWhereInput
    data: XOR<BuyerUpdateWithoutCanopiesInput, BuyerUncheckedUpdateWithoutCanopiesInput>
  }

  export type BuyerUpdateWithoutCanopiesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    controls?: ControlUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutCanopiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    controls?: ControlUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type ControlUpsertWithWhereUniqueWithoutCanopyInput = {
    where: ControlWhereUniqueInput
    update: XOR<ControlUpdateWithoutCanopyInput, ControlUncheckedUpdateWithoutCanopyInput>
    create: XOR<ControlCreateWithoutCanopyInput, ControlUncheckedCreateWithoutCanopyInput>
  }

  export type ControlUpdateWithWhereUniqueWithoutCanopyInput = {
    where: ControlWhereUniqueInput
    data: XOR<ControlUpdateWithoutCanopyInput, ControlUncheckedUpdateWithoutCanopyInput>
  }

  export type ControlUpdateManyWithWhereWithoutCanopyInput = {
    where: ControlScalarWhereInput
    data: XOR<ControlUpdateManyMutationInput, ControlUncheckedUpdateManyWithoutCanopyInput>
  }

  export type CanopyCreateWithoutControlsInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    location: LocationCreateNestedOneWithoutCanopiesInput
    buyer?: BuyerCreateNestedOneWithoutCanopiesInput
  }

  export type CanopyUncheckedCreateWithoutControlsInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type CanopyCreateOrConnectWithoutControlsInput = {
    where: CanopyWhereUniqueInput
    create: XOR<CanopyCreateWithoutControlsInput, CanopyUncheckedCreateWithoutControlsInput>
  }

  export type BuyerCreateWithoutControlsInput = {
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopies?: CanopyCreateNestedManyWithoutBuyerInput
  }

  export type BuyerUncheckedCreateWithoutControlsInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopies?: CanopyUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type BuyerCreateOrConnectWithoutControlsInput = {
    where: BuyerWhereUniqueInput
    create: XOR<BuyerCreateWithoutControlsInput, BuyerUncheckedCreateWithoutControlsInput>
  }

  export type CanopyUpsertWithoutControlsInput = {
    update: XOR<CanopyUpdateWithoutControlsInput, CanopyUncheckedUpdateWithoutControlsInput>
    create: XOR<CanopyCreateWithoutControlsInput, CanopyUncheckedCreateWithoutControlsInput>
    where?: CanopyWhereInput
  }

  export type CanopyUpdateToOneWithWhereWithoutControlsInput = {
    where?: CanopyWhereInput
    data: XOR<CanopyUpdateWithoutControlsInput, CanopyUncheckedUpdateWithoutControlsInput>
  }

  export type CanopyUpdateWithoutControlsInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    location?: LocationUpdateOneRequiredWithoutCanopiesNestedInput
    buyer?: BuyerUpdateOneWithoutCanopiesNestedInput
  }

  export type CanopyUncheckedUpdateWithoutControlsInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type BuyerUpsertWithoutControlsInput = {
    update: XOR<BuyerUpdateWithoutControlsInput, BuyerUncheckedUpdateWithoutControlsInput>
    create: XOR<BuyerCreateWithoutControlsInput, BuyerUncheckedCreateWithoutControlsInput>
    where?: BuyerWhereInput
  }

  export type BuyerUpdateToOneWithWhereWithoutControlsInput = {
    where?: BuyerWhereInput
    data: XOR<BuyerUpdateWithoutControlsInput, BuyerUncheckedUpdateWithoutControlsInput>
  }

  export type BuyerUpdateWithoutControlsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopies?: CanopyUpdateManyWithoutBuyerNestedInput
  }

  export type BuyerUncheckedUpdateWithoutControlsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopies?: CanopyUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type CanopyCreateManyBuyerInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type ControlCreateManyBuyerInput = {
    id?: number
    canopy_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type CanopyUpdateWithoutBuyerInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    location?: LocationUpdateOneRequiredWithoutCanopiesNestedInput
    controls?: ControlUpdateManyWithoutCanopyNestedInput
  }

  export type CanopyUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    controls?: ControlUncheckedUpdateManyWithoutCanopyNestedInput
  }

  export type CanopyUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ControlUpdateWithoutBuyerInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    canopy?: CanopyUpdateOneRequiredWithoutControlsNestedInput
  }

  export type ControlUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CanopyCreateManyLocationInput = {
    id?: number
    manage_number: string
    class_number: string
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type CanopyUpdateWithoutLocationInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyer?: BuyerUpdateOneWithoutCanopiesNestedInput
    controls?: ControlUpdateManyWithoutCanopyNestedInput
  }

  export type CanopyUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    controls?: ControlUncheckedUpdateManyWithoutCanopyNestedInput
  }

  export type CanopyUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ControlCreateManyCanopyInput = {
    id?: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type ControlUpdateWithoutCanopyInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: BuyerUpdateOneRequiredWithoutControlsNestedInput
  }

  export type ControlUncheckedUpdateWithoutCanopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ControlUncheckedUpdateManyWithoutCanopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BuyerCountOutputTypeDefaultArgs instead
     */
    export type BuyerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuyerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CanopyCountOutputTypeDefaultArgs instead
     */
    export type CanopyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CanopyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BuyerDefaultArgs instead
     */
    export type BuyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuyerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CanopyDefaultArgs instead
     */
    export type CanopyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CanopyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ControlDefaultArgs instead
     */
    export type ControlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ControlDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}