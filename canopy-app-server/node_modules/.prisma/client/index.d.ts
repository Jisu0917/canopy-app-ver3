
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model admin
 * 
 */
export type admin = $Result.DefaultSelection<Prisma.$adminPayload>
/**
 * Model buyer
 * 
 */
export type buyer = $Result.DefaultSelection<Prisma.$buyerPayload>
/**
 * Model canopy
 * 
 */
export type canopy = $Result.DefaultSelection<Prisma.$canopyPayload>
/**
 * Model control
 * 
 */
export type control = $Result.DefaultSelection<Prisma.$controlPayload>
/**
 * Model location
 * 
 */
export type location = $Result.DefaultSelection<Prisma.$locationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.adminDelegate<ExtArgs>;

  /**
   * `prisma.buyer`: Exposes CRUD operations for the **buyer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buyers
    * const buyers = await prisma.buyer.findMany()
    * ```
    */
  get buyer(): Prisma.buyerDelegate<ExtArgs>;

  /**
   * `prisma.canopy`: Exposes CRUD operations for the **canopy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Canopies
    * const canopies = await prisma.canopy.findMany()
    * ```
    */
  get canopy(): Prisma.canopyDelegate<ExtArgs>;

  /**
   * `prisma.control`: Exposes CRUD operations for the **control** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Controls
    * const controls = await prisma.control.findMany()
    * ```
    */
  get control(): Prisma.controlDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.locationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    admin: 'admin',
    buyer: 'buyer',
    canopy: 'canopy',
    control: 'control',
    location: 'location'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "admin" | "buyer" | "canopy" | "control" | "location"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      admin: {
        payload: Prisma.$adminPayload<ExtArgs>
        fields: Prisma.adminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          findFirst: {
            args: Prisma.adminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          findMany: {
            args: Prisma.adminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>[]
          }
          create: {
            args: Prisma.adminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          createMany: {
            args: Prisma.adminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.adminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          update: {
            args: Prisma.adminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          deleteMany: {
            args: Prisma.adminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.adminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.adminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.adminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      buyer: {
        payload: Prisma.$buyerPayload<ExtArgs>
        fields: Prisma.buyerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.buyerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.buyerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload>
          }
          findFirst: {
            args: Prisma.buyerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.buyerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload>
          }
          findMany: {
            args: Prisma.buyerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload>[]
          }
          create: {
            args: Prisma.buyerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload>
          }
          createMany: {
            args: Prisma.buyerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.buyerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload>
          }
          update: {
            args: Prisma.buyerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload>
          }
          deleteMany: {
            args: Prisma.buyerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.buyerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.buyerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buyerPayload>
          }
          aggregate: {
            args: Prisma.BuyerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyer>
          }
          groupBy: {
            args: Prisma.buyerGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyerGroupByOutputType>[]
          }
          count: {
            args: Prisma.buyerCountArgs<ExtArgs>
            result: $Utils.Optional<BuyerCountAggregateOutputType> | number
          }
        }
      }
      canopy: {
        payload: Prisma.$canopyPayload<ExtArgs>
        fields: Prisma.canopyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.canopyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.canopyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload>
          }
          findFirst: {
            args: Prisma.canopyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.canopyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload>
          }
          findMany: {
            args: Prisma.canopyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload>[]
          }
          create: {
            args: Prisma.canopyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload>
          }
          createMany: {
            args: Prisma.canopyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.canopyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload>
          }
          update: {
            args: Prisma.canopyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload>
          }
          deleteMany: {
            args: Prisma.canopyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.canopyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.canopyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$canopyPayload>
          }
          aggregate: {
            args: Prisma.CanopyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCanopy>
          }
          groupBy: {
            args: Prisma.canopyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CanopyGroupByOutputType>[]
          }
          count: {
            args: Prisma.canopyCountArgs<ExtArgs>
            result: $Utils.Optional<CanopyCountAggregateOutputType> | number
          }
        }
      }
      control: {
        payload: Prisma.$controlPayload<ExtArgs>
        fields: Prisma.controlFieldRefs
        operations: {
          findUnique: {
            args: Prisma.controlFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.controlFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload>
          }
          findFirst: {
            args: Prisma.controlFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.controlFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload>
          }
          findMany: {
            args: Prisma.controlFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload>[]
          }
          create: {
            args: Prisma.controlCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload>
          }
          createMany: {
            args: Prisma.controlCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.controlDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload>
          }
          update: {
            args: Prisma.controlUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload>
          }
          deleteMany: {
            args: Prisma.controlDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.controlUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.controlUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$controlPayload>
          }
          aggregate: {
            args: Prisma.ControlAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateControl>
          }
          groupBy: {
            args: Prisma.controlGroupByArgs<ExtArgs>
            result: $Utils.Optional<ControlGroupByOutputType>[]
          }
          count: {
            args: Prisma.controlCountArgs<ExtArgs>
            result: $Utils.Optional<ControlCountAggregateOutputType> | number
          }
        }
      }
      location: {
        payload: Prisma.$locationPayload<ExtArgs>
        fields: Prisma.locationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.locationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.locationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          findFirst: {
            args: Prisma.locationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.locationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          findMany: {
            args: Prisma.locationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>[]
          }
          create: {
            args: Prisma.locationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          createMany: {
            args: Prisma.locationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.locationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          update: {
            args: Prisma.locationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          deleteMany: {
            args: Prisma.locationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.locationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.locationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$locationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.locationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.locationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BuyerCountOutputType
   */

  export type BuyerCountOutputType = {
    canopy: number
    control: number
  }

  export type BuyerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopy?: boolean | BuyerCountOutputTypeCountCanopyArgs
    control?: boolean | BuyerCountOutputTypeCountControlArgs
  }

  // Custom InputTypes
  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyerCountOutputType
     */
    select?: BuyerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountCanopyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: canopyWhereInput
  }

  /**
   * BuyerCountOutputType without action
   */
  export type BuyerCountOutputTypeCountControlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controlWhereInput
  }


  /**
   * Count Type CanopyCountOutputType
   */

  export type CanopyCountOutputType = {
    control: number
  }

  export type CanopyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    control?: boolean | CanopyCountOutputTypeCountControlArgs
  }

  // Custom InputTypes
  /**
   * CanopyCountOutputType without action
   */
  export type CanopyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CanopyCountOutputType
     */
    select?: CanopyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CanopyCountOutputType without action
   */
  export type CanopyCountOutputTypeCountControlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controlWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    canopy: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopy?: boolean | LocationCountOutputTypeCountCanopyArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountCanopyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: canopyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    name: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    name: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    user_id: number
    password: number
    name: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    name?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    name?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    name?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admin to aggregate.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type adminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adminWhereInput
    orderBy?: adminOrderByWithAggregationInput | adminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: adminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    user_id: string
    password: string
    name: string
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends adminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type adminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    password?: boolean
    name?: boolean
  }, ExtArgs["result"]["admin"]>


  export type adminSelectScalar = {
    id?: boolean
    user_id?: boolean
    password?: boolean
    name?: boolean
  }


  export type $adminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      password: string
      name: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type adminGetPayload<S extends boolean | null | undefined | adminDefaultArgs> = $Result.GetResult<Prisma.$adminPayload, S>

  type adminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<adminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface adminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['admin'], meta: { name: 'admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {adminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adminFindUniqueArgs>(args: SelectSubset<T, adminFindUniqueArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {adminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adminFindUniqueOrThrowArgs>(args: SelectSubset<T, adminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adminFindFirstArgs>(args?: SelectSubset<T, adminFindFirstArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adminFindFirstOrThrowArgs>(args?: SelectSubset<T, adminFindFirstOrThrowArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends adminFindManyArgs>(args?: SelectSubset<T, adminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {adminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends adminCreateArgs>(args: SelectSubset<T, adminCreateArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {adminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adminCreateManyArgs>(args?: SelectSubset<T, adminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {adminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends adminDeleteArgs>(args: SelectSubset<T, adminDeleteArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {adminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adminUpdateArgs>(args: SelectSubset<T, adminUpdateArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {adminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adminDeleteManyArgs>(args?: SelectSubset<T, adminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adminUpdateManyArgs>(args: SelectSubset<T, adminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {adminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends adminUpsertArgs>(args: SelectSubset<T, adminUpsertArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends adminCountArgs>(
      args?: Subset<T, adminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adminGroupByArgs['orderBy'] }
        : { orderBy?: adminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the admin model
   */
  readonly fields: adminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the admin model
   */ 
  interface adminFieldRefs {
    readonly id: FieldRef<"admin", 'Int'>
    readonly user_id: FieldRef<"admin", 'String'>
    readonly password: FieldRef<"admin", 'String'>
    readonly name: FieldRef<"admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * admin findUnique
   */
  export type adminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin findUniqueOrThrow
   */
  export type adminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin findFirst
   */
  export type adminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * admin findFirstOrThrow
   */
  export type adminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * admin findMany
   */
  export type adminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * admin create
   */
  export type adminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * The data needed to create a admin.
     */
    data: XOR<adminCreateInput, adminUncheckedCreateInput>
  }

  /**
   * admin createMany
   */
  export type adminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many admins.
     */
    data: adminCreateManyInput | adminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * admin update
   */
  export type adminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * The data needed to update a admin.
     */
    data: XOR<adminUpdateInput, adminUncheckedUpdateInput>
    /**
     * Choose, which admin to update.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin updateMany
   */
  export type adminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update admins.
     */
    data: XOR<adminUpdateManyMutationInput, adminUncheckedUpdateManyInput>
    /**
     * Filter which admins to update
     */
    where?: adminWhereInput
  }

  /**
   * admin upsert
   */
  export type adminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * The filter to search for the admin to update in case it exists.
     */
    where: adminWhereUniqueInput
    /**
     * In case the admin found by the `where` argument doesn't exist, create a new admin with this data.
     */
    create: XOR<adminCreateInput, adminUncheckedCreateInput>
    /**
     * In case the admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adminUpdateInput, adminUncheckedUpdateInput>
  }

  /**
   * admin delete
   */
  export type adminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter which admin to delete.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin deleteMany
   */
  export type adminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admins to delete
     */
    where?: adminWhereInput
  }

  /**
   * admin without action
   */
  export type adminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
  }


  /**
   * Model buyer
   */

  export type AggregateBuyer = {
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  export type BuyerAvgAggregateOutputType = {
    id: number | null
  }

  export type BuyerSumAggregateOutputType = {
    id: number | null
  }

  export type BuyerMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    region: string | null
    supervisor_name: string | null
    supervisor_phone: string | null
  }

  export type BuyerMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    password: string | null
    region: string | null
    supervisor_name: string | null
    supervisor_phone: string | null
  }

  export type BuyerCountAggregateOutputType = {
    id: number
    user_id: number
    password: number
    region: number
    supervisor_name: number
    supervisor_phone: number
    _all: number
  }


  export type BuyerAvgAggregateInputType = {
    id?: true
  }

  export type BuyerSumAggregateInputType = {
    id?: true
  }

  export type BuyerMinAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    region?: true
    supervisor_name?: true
    supervisor_phone?: true
  }

  export type BuyerMaxAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    region?: true
    supervisor_name?: true
    supervisor_phone?: true
  }

  export type BuyerCountAggregateInputType = {
    id?: true
    user_id?: true
    password?: true
    region?: true
    supervisor_name?: true
    supervisor_phone?: true
    _all?: true
  }

  export type BuyerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which buyer to aggregate.
     */
    where?: buyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buyers to fetch.
     */
    orderBy?: buyerOrderByWithRelationInput | buyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: buyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned buyers
    **/
    _count?: true | BuyerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyerMaxAggregateInputType
  }

  export type GetBuyerAggregateType<T extends BuyerAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyer[P]>
      : GetScalarType<T[P], AggregateBuyer[P]>
  }




  export type buyerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: buyerWhereInput
    orderBy?: buyerOrderByWithAggregationInput | buyerOrderByWithAggregationInput[]
    by: BuyerScalarFieldEnum[] | BuyerScalarFieldEnum
    having?: buyerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyerCountAggregateInputType | true
    _avg?: BuyerAvgAggregateInputType
    _sum?: BuyerSumAggregateInputType
    _min?: BuyerMinAggregateInputType
    _max?: BuyerMaxAggregateInputType
  }

  export type BuyerGroupByOutputType = {
    id: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    _count: BuyerCountAggregateOutputType | null
    _avg: BuyerAvgAggregateOutputType | null
    _sum: BuyerSumAggregateOutputType | null
    _min: BuyerMinAggregateOutputType | null
    _max: BuyerMaxAggregateOutputType | null
  }

  type GetBuyerGroupByPayload<T extends buyerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyerGroupByOutputType[P]>
            : GetScalarType<T[P], BuyerGroupByOutputType[P]>
        }
      >
    >


  export type buyerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    password?: boolean
    region?: boolean
    supervisor_name?: boolean
    supervisor_phone?: boolean
    canopy?: boolean | buyer$canopyArgs<ExtArgs>
    control?: boolean | buyer$controlArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyer"]>


  export type buyerSelectScalar = {
    id?: boolean
    user_id?: boolean
    password?: boolean
    region?: boolean
    supervisor_name?: boolean
    supervisor_phone?: boolean
  }

  export type buyerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopy?: boolean | buyer$canopyArgs<ExtArgs>
    control?: boolean | buyer$controlArgs<ExtArgs>
    _count?: boolean | BuyerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $buyerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "buyer"
    objects: {
      canopy: Prisma.$canopyPayload<ExtArgs>[]
      control: Prisma.$controlPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      password: string
      region: string
      supervisor_name: string
      supervisor_phone: string
    }, ExtArgs["result"]["buyer"]>
    composites: {}
  }

  type buyerGetPayload<S extends boolean | null | undefined | buyerDefaultArgs> = $Result.GetResult<Prisma.$buyerPayload, S>

  type buyerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<buyerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BuyerCountAggregateInputType | true
    }

  export interface buyerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['buyer'], meta: { name: 'buyer' } }
    /**
     * Find zero or one Buyer that matches the filter.
     * @param {buyerFindUniqueArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends buyerFindUniqueArgs>(args: SelectSubset<T, buyerFindUniqueArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Buyer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {buyerFindUniqueOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends buyerFindUniqueOrThrowArgs>(args: SelectSubset<T, buyerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Buyer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buyerFindFirstArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends buyerFindFirstArgs>(args?: SelectSubset<T, buyerFindFirstArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Buyer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buyerFindFirstOrThrowArgs} args - Arguments to find a Buyer
     * @example
     * // Get one Buyer
     * const buyer = await prisma.buyer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends buyerFindFirstOrThrowArgs>(args?: SelectSubset<T, buyerFindFirstOrThrowArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Buyers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buyerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buyers
     * const buyers = await prisma.buyer.findMany()
     * 
     * // Get first 10 Buyers
     * const buyers = await prisma.buyer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buyerWithIdOnly = await prisma.buyer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends buyerFindManyArgs>(args?: SelectSubset<T, buyerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Buyer.
     * @param {buyerCreateArgs} args - Arguments to create a Buyer.
     * @example
     * // Create one Buyer
     * const Buyer = await prisma.buyer.create({
     *   data: {
     *     // ... data to create a Buyer
     *   }
     * })
     * 
     */
    create<T extends buyerCreateArgs>(args: SelectSubset<T, buyerCreateArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Buyers.
     * @param {buyerCreateManyArgs} args - Arguments to create many Buyers.
     * @example
     * // Create many Buyers
     * const buyer = await prisma.buyer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends buyerCreateManyArgs>(args?: SelectSubset<T, buyerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Buyer.
     * @param {buyerDeleteArgs} args - Arguments to delete one Buyer.
     * @example
     * // Delete one Buyer
     * const Buyer = await prisma.buyer.delete({
     *   where: {
     *     // ... filter to delete one Buyer
     *   }
     * })
     * 
     */
    delete<T extends buyerDeleteArgs>(args: SelectSubset<T, buyerDeleteArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Buyer.
     * @param {buyerUpdateArgs} args - Arguments to update one Buyer.
     * @example
     * // Update one Buyer
     * const buyer = await prisma.buyer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends buyerUpdateArgs>(args: SelectSubset<T, buyerUpdateArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Buyers.
     * @param {buyerDeleteManyArgs} args - Arguments to filter Buyers to delete.
     * @example
     * // Delete a few Buyers
     * const { count } = await prisma.buyer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends buyerDeleteManyArgs>(args?: SelectSubset<T, buyerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buyerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buyers
     * const buyer = await prisma.buyer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends buyerUpdateManyArgs>(args: SelectSubset<T, buyerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Buyer.
     * @param {buyerUpsertArgs} args - Arguments to update or create a Buyer.
     * @example
     * // Update or create a Buyer
     * const buyer = await prisma.buyer.upsert({
     *   create: {
     *     // ... data to create a Buyer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buyer we want to update
     *   }
     * })
     */
    upsert<T extends buyerUpsertArgs>(args: SelectSubset<T, buyerUpsertArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Buyers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buyerCountArgs} args - Arguments to filter Buyers to count.
     * @example
     * // Count the number of Buyers
     * const count = await prisma.buyer.count({
     *   where: {
     *     // ... the filter for the Buyers we want to count
     *   }
     * })
    **/
    count<T extends buyerCountArgs>(
      args?: Subset<T, buyerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyerAggregateArgs>(args: Subset<T, BuyerAggregateArgs>): Prisma.PrismaPromise<GetBuyerAggregateType<T>>

    /**
     * Group by Buyer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buyerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends buyerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: buyerGroupByArgs['orderBy'] }
        : { orderBy?: buyerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, buyerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the buyer model
   */
  readonly fields: buyerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for buyer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__buyerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    canopy<T extends buyer$canopyArgs<ExtArgs> = {}>(args?: Subset<T, buyer$canopyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findMany"> | Null>
    control<T extends buyer$controlArgs<ExtArgs> = {}>(args?: Subset<T, buyer$controlArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the buyer model
   */ 
  interface buyerFieldRefs {
    readonly id: FieldRef<"buyer", 'Int'>
    readonly user_id: FieldRef<"buyer", 'String'>
    readonly password: FieldRef<"buyer", 'String'>
    readonly region: FieldRef<"buyer", 'String'>
    readonly supervisor_name: FieldRef<"buyer", 'String'>
    readonly supervisor_phone: FieldRef<"buyer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * buyer findUnique
   */
  export type buyerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * Filter, which buyer to fetch.
     */
    where: buyerWhereUniqueInput
  }

  /**
   * buyer findUniqueOrThrow
   */
  export type buyerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * Filter, which buyer to fetch.
     */
    where: buyerWhereUniqueInput
  }

  /**
   * buyer findFirst
   */
  export type buyerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * Filter, which buyer to fetch.
     */
    where?: buyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buyers to fetch.
     */
    orderBy?: buyerOrderByWithRelationInput | buyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for buyers.
     */
    cursor?: buyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * buyer findFirstOrThrow
   */
  export type buyerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * Filter, which buyer to fetch.
     */
    where?: buyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buyers to fetch.
     */
    orderBy?: buyerOrderByWithRelationInput | buyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for buyers.
     */
    cursor?: buyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buyers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of buyers.
     */
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * buyer findMany
   */
  export type buyerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * Filter, which buyers to fetch.
     */
    where?: buyerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buyers to fetch.
     */
    orderBy?: buyerOrderByWithRelationInput | buyerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing buyers.
     */
    cursor?: buyerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buyers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buyers.
     */
    skip?: number
    distinct?: BuyerScalarFieldEnum | BuyerScalarFieldEnum[]
  }

  /**
   * buyer create
   */
  export type buyerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * The data needed to create a buyer.
     */
    data: XOR<buyerCreateInput, buyerUncheckedCreateInput>
  }

  /**
   * buyer createMany
   */
  export type buyerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many buyers.
     */
    data: buyerCreateManyInput | buyerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * buyer update
   */
  export type buyerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * The data needed to update a buyer.
     */
    data: XOR<buyerUpdateInput, buyerUncheckedUpdateInput>
    /**
     * Choose, which buyer to update.
     */
    where: buyerWhereUniqueInput
  }

  /**
   * buyer updateMany
   */
  export type buyerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update buyers.
     */
    data: XOR<buyerUpdateManyMutationInput, buyerUncheckedUpdateManyInput>
    /**
     * Filter which buyers to update
     */
    where?: buyerWhereInput
  }

  /**
   * buyer upsert
   */
  export type buyerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * The filter to search for the buyer to update in case it exists.
     */
    where: buyerWhereUniqueInput
    /**
     * In case the buyer found by the `where` argument doesn't exist, create a new buyer with this data.
     */
    create: XOR<buyerCreateInput, buyerUncheckedCreateInput>
    /**
     * In case the buyer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<buyerUpdateInput, buyerUncheckedUpdateInput>
  }

  /**
   * buyer delete
   */
  export type buyerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    /**
     * Filter which buyer to delete.
     */
    where: buyerWhereUniqueInput
  }

  /**
   * buyer deleteMany
   */
  export type buyerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which buyers to delete
     */
    where?: buyerWhereInput
  }

  /**
   * buyer.canopy
   */
  export type buyer$canopyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    where?: canopyWhereInput
    orderBy?: canopyOrderByWithRelationInput | canopyOrderByWithRelationInput[]
    cursor?: canopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * buyer.control
   */
  export type buyer$controlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    where?: controlWhereInput
    orderBy?: controlOrderByWithRelationInput | controlOrderByWithRelationInput[]
    cursor?: controlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * buyer without action
   */
  export type buyerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
  }


  /**
   * Model canopy
   */

  export type AggregateCanopy = {
    _count: CanopyCountAggregateOutputType | null
    _avg: CanopyAvgAggregateOutputType | null
    _sum: CanopySumAggregateOutputType | null
    _min: CanopyMinAggregateOutputType | null
    _max: CanopyMaxAggregateOutputType | null
  }

  export type CanopyAvgAggregateOutputType = {
    id: number | null
    location_id: number | null
    buyer_id: number | null
    status_temperature: number | null
  }

  export type CanopySumAggregateOutputType = {
    id: number | null
    location_id: number | null
    buyer_id: number | null
    status_temperature: number | null
  }

  export type CanopyMinAggregateOutputType = {
    id: number | null
    manage_number: string | null
    class_number: string | null
    location_id: number | null
    buyer_id: number | null
    status_fold: boolean | null
    status_motor: boolean | null
    status_led: boolean | null
    status_sound: boolean | null
    status_inform: boolean | null
    status_temperature: number | null
    status_transmit: boolean | null
  }

  export type CanopyMaxAggregateOutputType = {
    id: number | null
    manage_number: string | null
    class_number: string | null
    location_id: number | null
    buyer_id: number | null
    status_fold: boolean | null
    status_motor: boolean | null
    status_led: boolean | null
    status_sound: boolean | null
    status_inform: boolean | null
    status_temperature: number | null
    status_transmit: boolean | null
  }

  export type CanopyCountAggregateOutputType = {
    id: number
    manage_number: number
    class_number: number
    location_id: number
    buyer_id: number
    status_fold: number
    status_motor: number
    status_led: number
    status_sound: number
    status_inform: number
    status_temperature: number
    status_transmit: number
    _all: number
  }


  export type CanopyAvgAggregateInputType = {
    id?: true
    location_id?: true
    buyer_id?: true
    status_temperature?: true
  }

  export type CanopySumAggregateInputType = {
    id?: true
    location_id?: true
    buyer_id?: true
    status_temperature?: true
  }

  export type CanopyMinAggregateInputType = {
    id?: true
    manage_number?: true
    class_number?: true
    location_id?: true
    buyer_id?: true
    status_fold?: true
    status_motor?: true
    status_led?: true
    status_sound?: true
    status_inform?: true
    status_temperature?: true
    status_transmit?: true
  }

  export type CanopyMaxAggregateInputType = {
    id?: true
    manage_number?: true
    class_number?: true
    location_id?: true
    buyer_id?: true
    status_fold?: true
    status_motor?: true
    status_led?: true
    status_sound?: true
    status_inform?: true
    status_temperature?: true
    status_transmit?: true
  }

  export type CanopyCountAggregateInputType = {
    id?: true
    manage_number?: true
    class_number?: true
    location_id?: true
    buyer_id?: true
    status_fold?: true
    status_motor?: true
    status_led?: true
    status_sound?: true
    status_inform?: true
    status_temperature?: true
    status_transmit?: true
    _all?: true
  }

  export type CanopyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which canopy to aggregate.
     */
    where?: canopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of canopies to fetch.
     */
    orderBy?: canopyOrderByWithRelationInput | canopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: canopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` canopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned canopies
    **/
    _count?: true | CanopyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CanopyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CanopySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CanopyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CanopyMaxAggregateInputType
  }

  export type GetCanopyAggregateType<T extends CanopyAggregateArgs> = {
        [P in keyof T & keyof AggregateCanopy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCanopy[P]>
      : GetScalarType<T[P], AggregateCanopy[P]>
  }




  export type canopyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: canopyWhereInput
    orderBy?: canopyOrderByWithAggregationInput | canopyOrderByWithAggregationInput[]
    by: CanopyScalarFieldEnum[] | CanopyScalarFieldEnum
    having?: canopyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CanopyCountAggregateInputType | true
    _avg?: CanopyAvgAggregateInputType
    _sum?: CanopySumAggregateInputType
    _min?: CanopyMinAggregateInputType
    _max?: CanopyMaxAggregateInputType
  }

  export type CanopyGroupByOutputType = {
    id: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id: number | null
    status_fold: boolean | null
    status_motor: boolean | null
    status_led: boolean | null
    status_sound: boolean | null
    status_inform: boolean | null
    status_temperature: number | null
    status_transmit: boolean | null
    _count: CanopyCountAggregateOutputType | null
    _avg: CanopyAvgAggregateOutputType | null
    _sum: CanopySumAggregateOutputType | null
    _min: CanopyMinAggregateOutputType | null
    _max: CanopyMaxAggregateOutputType | null
  }

  type GetCanopyGroupByPayload<T extends canopyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CanopyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CanopyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CanopyGroupByOutputType[P]>
            : GetScalarType<T[P], CanopyGroupByOutputType[P]>
        }
      >
    >


  export type canopySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    manage_number?: boolean
    class_number?: boolean
    location_id?: boolean
    buyer_id?: boolean
    status_fold?: boolean
    status_motor?: boolean
    status_led?: boolean
    status_sound?: boolean
    status_inform?: boolean
    status_temperature?: boolean
    status_transmit?: boolean
    buyer?: boolean | canopy$buyerArgs<ExtArgs>
    location?: boolean | locationDefaultArgs<ExtArgs>
    control?: boolean | canopy$controlArgs<ExtArgs>
    _count?: boolean | CanopyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["canopy"]>


  export type canopySelectScalar = {
    id?: boolean
    manage_number?: boolean
    class_number?: boolean
    location_id?: boolean
    buyer_id?: boolean
    status_fold?: boolean
    status_motor?: boolean
    status_led?: boolean
    status_sound?: boolean
    status_inform?: boolean
    status_temperature?: boolean
    status_transmit?: boolean
  }

  export type canopyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | canopy$buyerArgs<ExtArgs>
    location?: boolean | locationDefaultArgs<ExtArgs>
    control?: boolean | canopy$controlArgs<ExtArgs>
    _count?: boolean | CanopyCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $canopyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "canopy"
    objects: {
      buyer: Prisma.$buyerPayload<ExtArgs> | null
      location: Prisma.$locationPayload<ExtArgs>
      control: Prisma.$controlPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      manage_number: string
      class_number: string
      location_id: number
      buyer_id: number | null
      status_fold: boolean | null
      status_motor: boolean | null
      status_led: boolean | null
      status_sound: boolean | null
      status_inform: boolean | null
      status_temperature: number | null
      status_transmit: boolean | null
    }, ExtArgs["result"]["canopy"]>
    composites: {}
  }

  type canopyGetPayload<S extends boolean | null | undefined | canopyDefaultArgs> = $Result.GetResult<Prisma.$canopyPayload, S>

  type canopyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<canopyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CanopyCountAggregateInputType | true
    }

  export interface canopyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['canopy'], meta: { name: 'canopy' } }
    /**
     * Find zero or one Canopy that matches the filter.
     * @param {canopyFindUniqueArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends canopyFindUniqueArgs>(args: SelectSubset<T, canopyFindUniqueArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Canopy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {canopyFindUniqueOrThrowArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends canopyFindUniqueOrThrowArgs>(args: SelectSubset<T, canopyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Canopy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {canopyFindFirstArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends canopyFindFirstArgs>(args?: SelectSubset<T, canopyFindFirstArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Canopy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {canopyFindFirstOrThrowArgs} args - Arguments to find a Canopy
     * @example
     * // Get one Canopy
     * const canopy = await prisma.canopy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends canopyFindFirstOrThrowArgs>(args?: SelectSubset<T, canopyFindFirstOrThrowArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Canopies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {canopyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Canopies
     * const canopies = await prisma.canopy.findMany()
     * 
     * // Get first 10 Canopies
     * const canopies = await prisma.canopy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const canopyWithIdOnly = await prisma.canopy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends canopyFindManyArgs>(args?: SelectSubset<T, canopyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Canopy.
     * @param {canopyCreateArgs} args - Arguments to create a Canopy.
     * @example
     * // Create one Canopy
     * const Canopy = await prisma.canopy.create({
     *   data: {
     *     // ... data to create a Canopy
     *   }
     * })
     * 
     */
    create<T extends canopyCreateArgs>(args: SelectSubset<T, canopyCreateArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Canopies.
     * @param {canopyCreateManyArgs} args - Arguments to create many Canopies.
     * @example
     * // Create many Canopies
     * const canopy = await prisma.canopy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends canopyCreateManyArgs>(args?: SelectSubset<T, canopyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Canopy.
     * @param {canopyDeleteArgs} args - Arguments to delete one Canopy.
     * @example
     * // Delete one Canopy
     * const Canopy = await prisma.canopy.delete({
     *   where: {
     *     // ... filter to delete one Canopy
     *   }
     * })
     * 
     */
    delete<T extends canopyDeleteArgs>(args: SelectSubset<T, canopyDeleteArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Canopy.
     * @param {canopyUpdateArgs} args - Arguments to update one Canopy.
     * @example
     * // Update one Canopy
     * const canopy = await prisma.canopy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends canopyUpdateArgs>(args: SelectSubset<T, canopyUpdateArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Canopies.
     * @param {canopyDeleteManyArgs} args - Arguments to filter Canopies to delete.
     * @example
     * // Delete a few Canopies
     * const { count } = await prisma.canopy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends canopyDeleteManyArgs>(args?: SelectSubset<T, canopyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Canopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {canopyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Canopies
     * const canopy = await prisma.canopy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends canopyUpdateManyArgs>(args: SelectSubset<T, canopyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Canopy.
     * @param {canopyUpsertArgs} args - Arguments to update or create a Canopy.
     * @example
     * // Update or create a Canopy
     * const canopy = await prisma.canopy.upsert({
     *   create: {
     *     // ... data to create a Canopy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Canopy we want to update
     *   }
     * })
     */
    upsert<T extends canopyUpsertArgs>(args: SelectSubset<T, canopyUpsertArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Canopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {canopyCountArgs} args - Arguments to filter Canopies to count.
     * @example
     * // Count the number of Canopies
     * const count = await prisma.canopy.count({
     *   where: {
     *     // ... the filter for the Canopies we want to count
     *   }
     * })
    **/
    count<T extends canopyCountArgs>(
      args?: Subset<T, canopyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CanopyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Canopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CanopyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CanopyAggregateArgs>(args: Subset<T, CanopyAggregateArgs>): Prisma.PrismaPromise<GetCanopyAggregateType<T>>

    /**
     * Group by Canopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {canopyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends canopyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: canopyGroupByArgs['orderBy'] }
        : { orderBy?: canopyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, canopyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCanopyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the canopy model
   */
  readonly fields: canopyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for canopy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__canopyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buyer<T extends canopy$buyerArgs<ExtArgs> = {}>(args?: Subset<T, canopy$buyerArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    location<T extends locationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, locationDefaultArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    control<T extends canopy$controlArgs<ExtArgs> = {}>(args?: Subset<T, canopy$controlArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the canopy model
   */ 
  interface canopyFieldRefs {
    readonly id: FieldRef<"canopy", 'Int'>
    readonly manage_number: FieldRef<"canopy", 'String'>
    readonly class_number: FieldRef<"canopy", 'String'>
    readonly location_id: FieldRef<"canopy", 'Int'>
    readonly buyer_id: FieldRef<"canopy", 'Int'>
    readonly status_fold: FieldRef<"canopy", 'Boolean'>
    readonly status_motor: FieldRef<"canopy", 'Boolean'>
    readonly status_led: FieldRef<"canopy", 'Boolean'>
    readonly status_sound: FieldRef<"canopy", 'Boolean'>
    readonly status_inform: FieldRef<"canopy", 'Boolean'>
    readonly status_temperature: FieldRef<"canopy", 'Float'>
    readonly status_transmit: FieldRef<"canopy", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * canopy findUnique
   */
  export type canopyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * Filter, which canopy to fetch.
     */
    where: canopyWhereUniqueInput
  }

  /**
   * canopy findUniqueOrThrow
   */
  export type canopyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * Filter, which canopy to fetch.
     */
    where: canopyWhereUniqueInput
  }

  /**
   * canopy findFirst
   */
  export type canopyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * Filter, which canopy to fetch.
     */
    where?: canopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of canopies to fetch.
     */
    orderBy?: canopyOrderByWithRelationInput | canopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for canopies.
     */
    cursor?: canopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` canopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of canopies.
     */
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * canopy findFirstOrThrow
   */
  export type canopyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * Filter, which canopy to fetch.
     */
    where?: canopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of canopies to fetch.
     */
    orderBy?: canopyOrderByWithRelationInput | canopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for canopies.
     */
    cursor?: canopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` canopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of canopies.
     */
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * canopy findMany
   */
  export type canopyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * Filter, which canopies to fetch.
     */
    where?: canopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of canopies to fetch.
     */
    orderBy?: canopyOrderByWithRelationInput | canopyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing canopies.
     */
    cursor?: canopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` canopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` canopies.
     */
    skip?: number
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * canopy create
   */
  export type canopyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * The data needed to create a canopy.
     */
    data: XOR<canopyCreateInput, canopyUncheckedCreateInput>
  }

  /**
   * canopy createMany
   */
  export type canopyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many canopies.
     */
    data: canopyCreateManyInput | canopyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * canopy update
   */
  export type canopyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * The data needed to update a canopy.
     */
    data: XOR<canopyUpdateInput, canopyUncheckedUpdateInput>
    /**
     * Choose, which canopy to update.
     */
    where: canopyWhereUniqueInput
  }

  /**
   * canopy updateMany
   */
  export type canopyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update canopies.
     */
    data: XOR<canopyUpdateManyMutationInput, canopyUncheckedUpdateManyInput>
    /**
     * Filter which canopies to update
     */
    where?: canopyWhereInput
  }

  /**
   * canopy upsert
   */
  export type canopyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * The filter to search for the canopy to update in case it exists.
     */
    where: canopyWhereUniqueInput
    /**
     * In case the canopy found by the `where` argument doesn't exist, create a new canopy with this data.
     */
    create: XOR<canopyCreateInput, canopyUncheckedCreateInput>
    /**
     * In case the canopy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<canopyUpdateInput, canopyUncheckedUpdateInput>
  }

  /**
   * canopy delete
   */
  export type canopyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    /**
     * Filter which canopy to delete.
     */
    where: canopyWhereUniqueInput
  }

  /**
   * canopy deleteMany
   */
  export type canopyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which canopies to delete
     */
    where?: canopyWhereInput
  }

  /**
   * canopy.buyer
   */
  export type canopy$buyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buyer
     */
    select?: buyerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buyerInclude<ExtArgs> | null
    where?: buyerWhereInput
  }

  /**
   * canopy.control
   */
  export type canopy$controlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    where?: controlWhereInput
    orderBy?: controlOrderByWithRelationInput | controlOrderByWithRelationInput[]
    cursor?: controlWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * canopy without action
   */
  export type canopyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
  }


  /**
   * Model control
   */

  export type AggregateControl = {
    _count: ControlCountAggregateOutputType | null
    _avg: ControlAvgAggregateOutputType | null
    _sum: ControlSumAggregateOutputType | null
    _min: ControlMinAggregateOutputType | null
    _max: ControlMaxAggregateOutputType | null
  }

  export type ControlAvgAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
  }

  export type ControlSumAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
  }

  export type ControlMinAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
    fold: boolean | null
    motor: boolean | null
    led: boolean | null
    sound: boolean | null
    inform: boolean | null
    timestamp: Date | null
  }

  export type ControlMaxAggregateOutputType = {
    id: number | null
    canopy_id: number | null
    buyer_id: number | null
    fold: boolean | null
    motor: boolean | null
    led: boolean | null
    sound: boolean | null
    inform: boolean | null
    timestamp: Date | null
  }

  export type ControlCountAggregateOutputType = {
    id: number
    canopy_id: number
    buyer_id: number
    fold: number
    motor: number
    led: number
    sound: number
    inform: number
    timestamp: number
    _all: number
  }


  export type ControlAvgAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
  }

  export type ControlSumAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
  }

  export type ControlMinAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
    fold?: true
    motor?: true
    led?: true
    sound?: true
    inform?: true
    timestamp?: true
  }

  export type ControlMaxAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
    fold?: true
    motor?: true
    led?: true
    sound?: true
    inform?: true
    timestamp?: true
  }

  export type ControlCountAggregateInputType = {
    id?: true
    canopy_id?: true
    buyer_id?: true
    fold?: true
    motor?: true
    led?: true
    sound?: true
    inform?: true
    timestamp?: true
    _all?: true
  }

  export type ControlAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which control to aggregate.
     */
    where?: controlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controls to fetch.
     */
    orderBy?: controlOrderByWithRelationInput | controlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: controlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned controls
    **/
    _count?: true | ControlCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ControlAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ControlSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ControlMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ControlMaxAggregateInputType
  }

  export type GetControlAggregateType<T extends ControlAggregateArgs> = {
        [P in keyof T & keyof AggregateControl]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateControl[P]>
      : GetScalarType<T[P], AggregateControl[P]>
  }




  export type controlGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: controlWhereInput
    orderBy?: controlOrderByWithAggregationInput | controlOrderByWithAggregationInput[]
    by: ControlScalarFieldEnum[] | ControlScalarFieldEnum
    having?: controlScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ControlCountAggregateInputType | true
    _avg?: ControlAvgAggregateInputType
    _sum?: ControlSumAggregateInputType
    _min?: ControlMinAggregateInputType
    _max?: ControlMaxAggregateInputType
  }

  export type ControlGroupByOutputType = {
    id: number
    canopy_id: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date
    _count: ControlCountAggregateOutputType | null
    _avg: ControlAvgAggregateOutputType | null
    _sum: ControlSumAggregateOutputType | null
    _min: ControlMinAggregateOutputType | null
    _max: ControlMaxAggregateOutputType | null
  }

  type GetControlGroupByPayload<T extends controlGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ControlGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ControlGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ControlGroupByOutputType[P]>
            : GetScalarType<T[P], ControlGroupByOutputType[P]>
        }
      >
    >


  export type controlSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    canopy_id?: boolean
    buyer_id?: boolean
    fold?: boolean
    motor?: boolean
    led?: boolean
    sound?: boolean
    inform?: boolean
    timestamp?: boolean
    buyer?: boolean | buyerDefaultArgs<ExtArgs>
    canopy?: boolean | canopyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["control"]>


  export type controlSelectScalar = {
    id?: boolean
    canopy_id?: boolean
    buyer_id?: boolean
    fold?: boolean
    motor?: boolean
    led?: boolean
    sound?: boolean
    inform?: boolean
    timestamp?: boolean
  }

  export type controlInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buyer?: boolean | buyerDefaultArgs<ExtArgs>
    canopy?: boolean | canopyDefaultArgs<ExtArgs>
  }

  export type $controlPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "control"
    objects: {
      buyer: Prisma.$buyerPayload<ExtArgs>
      canopy: Prisma.$canopyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      canopy_id: number
      buyer_id: number
      fold: boolean
      motor: boolean
      led: boolean
      sound: boolean
      inform: boolean
      timestamp: Date
    }, ExtArgs["result"]["control"]>
    composites: {}
  }

  type controlGetPayload<S extends boolean | null | undefined | controlDefaultArgs> = $Result.GetResult<Prisma.$controlPayload, S>

  type controlCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<controlFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ControlCountAggregateInputType | true
    }

  export interface controlDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['control'], meta: { name: 'control' } }
    /**
     * Find zero or one Control that matches the filter.
     * @param {controlFindUniqueArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends controlFindUniqueArgs>(args: SelectSubset<T, controlFindUniqueArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Control that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {controlFindUniqueOrThrowArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends controlFindUniqueOrThrowArgs>(args: SelectSubset<T, controlFindUniqueOrThrowArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Control that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controlFindFirstArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends controlFindFirstArgs>(args?: SelectSubset<T, controlFindFirstArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Control that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controlFindFirstOrThrowArgs} args - Arguments to find a Control
     * @example
     * // Get one Control
     * const control = await prisma.control.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends controlFindFirstOrThrowArgs>(args?: SelectSubset<T, controlFindFirstOrThrowArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Controls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controlFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Controls
     * const controls = await prisma.control.findMany()
     * 
     * // Get first 10 Controls
     * const controls = await prisma.control.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const controlWithIdOnly = await prisma.control.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends controlFindManyArgs>(args?: SelectSubset<T, controlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Control.
     * @param {controlCreateArgs} args - Arguments to create a Control.
     * @example
     * // Create one Control
     * const Control = await prisma.control.create({
     *   data: {
     *     // ... data to create a Control
     *   }
     * })
     * 
     */
    create<T extends controlCreateArgs>(args: SelectSubset<T, controlCreateArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Controls.
     * @param {controlCreateManyArgs} args - Arguments to create many Controls.
     * @example
     * // Create many Controls
     * const control = await prisma.control.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends controlCreateManyArgs>(args?: SelectSubset<T, controlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Control.
     * @param {controlDeleteArgs} args - Arguments to delete one Control.
     * @example
     * // Delete one Control
     * const Control = await prisma.control.delete({
     *   where: {
     *     // ... filter to delete one Control
     *   }
     * })
     * 
     */
    delete<T extends controlDeleteArgs>(args: SelectSubset<T, controlDeleteArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Control.
     * @param {controlUpdateArgs} args - Arguments to update one Control.
     * @example
     * // Update one Control
     * const control = await prisma.control.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends controlUpdateArgs>(args: SelectSubset<T, controlUpdateArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Controls.
     * @param {controlDeleteManyArgs} args - Arguments to filter Controls to delete.
     * @example
     * // Delete a few Controls
     * const { count } = await prisma.control.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends controlDeleteManyArgs>(args?: SelectSubset<T, controlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Controls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controlUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Controls
     * const control = await prisma.control.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends controlUpdateManyArgs>(args: SelectSubset<T, controlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Control.
     * @param {controlUpsertArgs} args - Arguments to update or create a Control.
     * @example
     * // Update or create a Control
     * const control = await prisma.control.upsert({
     *   create: {
     *     // ... data to create a Control
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Control we want to update
     *   }
     * })
     */
    upsert<T extends controlUpsertArgs>(args: SelectSubset<T, controlUpsertArgs<ExtArgs>>): Prisma__controlClient<$Result.GetResult<Prisma.$controlPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Controls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controlCountArgs} args - Arguments to filter Controls to count.
     * @example
     * // Count the number of Controls
     * const count = await prisma.control.count({
     *   where: {
     *     // ... the filter for the Controls we want to count
     *   }
     * })
    **/
    count<T extends controlCountArgs>(
      args?: Subset<T, controlCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ControlCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Control.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ControlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ControlAggregateArgs>(args: Subset<T, ControlAggregateArgs>): Prisma.PrismaPromise<GetControlAggregateType<T>>

    /**
     * Group by Control.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {controlGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends controlGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: controlGroupByArgs['orderBy'] }
        : { orderBy?: controlGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, controlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetControlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the control model
   */
  readonly fields: controlFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for control.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__controlClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buyer<T extends buyerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, buyerDefaultArgs<ExtArgs>>): Prisma__buyerClient<$Result.GetResult<Prisma.$buyerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    canopy<T extends canopyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, canopyDefaultArgs<ExtArgs>>): Prisma__canopyClient<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the control model
   */ 
  interface controlFieldRefs {
    readonly id: FieldRef<"control", 'Int'>
    readonly canopy_id: FieldRef<"control", 'Int'>
    readonly buyer_id: FieldRef<"control", 'Int'>
    readonly fold: FieldRef<"control", 'Boolean'>
    readonly motor: FieldRef<"control", 'Boolean'>
    readonly led: FieldRef<"control", 'Boolean'>
    readonly sound: FieldRef<"control", 'Boolean'>
    readonly inform: FieldRef<"control", 'Boolean'>
    readonly timestamp: FieldRef<"control", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * control findUnique
   */
  export type controlFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * Filter, which control to fetch.
     */
    where: controlWhereUniqueInput
  }

  /**
   * control findUniqueOrThrow
   */
  export type controlFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * Filter, which control to fetch.
     */
    where: controlWhereUniqueInput
  }

  /**
   * control findFirst
   */
  export type controlFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * Filter, which control to fetch.
     */
    where?: controlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controls to fetch.
     */
    orderBy?: controlOrderByWithRelationInput | controlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controls.
     */
    cursor?: controlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controls.
     */
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * control findFirstOrThrow
   */
  export type controlFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * Filter, which control to fetch.
     */
    where?: controlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controls to fetch.
     */
    orderBy?: controlOrderByWithRelationInput | controlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for controls.
     */
    cursor?: controlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of controls.
     */
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * control findMany
   */
  export type controlFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * Filter, which controls to fetch.
     */
    where?: controlWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of controls to fetch.
     */
    orderBy?: controlOrderByWithRelationInput | controlOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing controls.
     */
    cursor?: controlWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` controls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` controls.
     */
    skip?: number
    distinct?: ControlScalarFieldEnum | ControlScalarFieldEnum[]
  }

  /**
   * control create
   */
  export type controlCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * The data needed to create a control.
     */
    data: XOR<controlCreateInput, controlUncheckedCreateInput>
  }

  /**
   * control createMany
   */
  export type controlCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many controls.
     */
    data: controlCreateManyInput | controlCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * control update
   */
  export type controlUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * The data needed to update a control.
     */
    data: XOR<controlUpdateInput, controlUncheckedUpdateInput>
    /**
     * Choose, which control to update.
     */
    where: controlWhereUniqueInput
  }

  /**
   * control updateMany
   */
  export type controlUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update controls.
     */
    data: XOR<controlUpdateManyMutationInput, controlUncheckedUpdateManyInput>
    /**
     * Filter which controls to update
     */
    where?: controlWhereInput
  }

  /**
   * control upsert
   */
  export type controlUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * The filter to search for the control to update in case it exists.
     */
    where: controlWhereUniqueInput
    /**
     * In case the control found by the `where` argument doesn't exist, create a new control with this data.
     */
    create: XOR<controlCreateInput, controlUncheckedCreateInput>
    /**
     * In case the control was found with the provided `where` argument, update it with this data.
     */
    update: XOR<controlUpdateInput, controlUncheckedUpdateInput>
  }

  /**
   * control delete
   */
  export type controlDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
    /**
     * Filter which control to delete.
     */
    where: controlWhereUniqueInput
  }

  /**
   * control deleteMany
   */
  export type controlDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which controls to delete
     */
    where?: controlWhereInput
  }

  /**
   * control without action
   */
  export type controlDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the control
     */
    select?: controlSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: controlInclude<ExtArgs> | null
  }


  /**
   * Model location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    region: string | null
    address: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    region: string | null
    address: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    region: number
    address: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    region?: true
    address?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    region?: true
    address?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    region?: true
    address?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which location to aggregate.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type locationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: locationWhereInput
    orderBy?: locationOrderByWithAggregationInput | locationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: locationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    region: string
    address: string
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends locationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type locationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    region?: boolean
    address?: boolean
    canopy?: boolean | location$canopyArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>


  export type locationSelectScalar = {
    id?: boolean
    region?: boolean
    address?: boolean
  }

  export type locationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canopy?: boolean | location$canopyArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $locationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "location"
    objects: {
      canopy: Prisma.$canopyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      region: string
      address: string
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type locationGetPayload<S extends boolean | null | undefined | locationDefaultArgs> = $Result.GetResult<Prisma.$locationPayload, S>

  type locationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<locationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface locationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['location'], meta: { name: 'location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {locationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends locationFindUniqueArgs>(args: SelectSubset<T, locationFindUniqueArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {locationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends locationFindUniqueOrThrowArgs>(args: SelectSubset<T, locationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends locationFindFirstArgs>(args?: SelectSubset<T, locationFindFirstArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends locationFindFirstOrThrowArgs>(args?: SelectSubset<T, locationFindFirstOrThrowArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends locationFindManyArgs>(args?: SelectSubset<T, locationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {locationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends locationCreateArgs>(args: SelectSubset<T, locationCreateArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {locationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends locationCreateManyArgs>(args?: SelectSubset<T, locationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Location.
     * @param {locationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends locationDeleteArgs>(args: SelectSubset<T, locationDeleteArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {locationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends locationUpdateArgs>(args: SelectSubset<T, locationUpdateArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {locationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends locationDeleteManyArgs>(args?: SelectSubset<T, locationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends locationUpdateManyArgs>(args: SelectSubset<T, locationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {locationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends locationUpsertArgs>(args: SelectSubset<T, locationUpsertArgs<ExtArgs>>): Prisma__locationClient<$Result.GetResult<Prisma.$locationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends locationCountArgs>(
      args?: Subset<T, locationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {locationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends locationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: locationGroupByArgs['orderBy'] }
        : { orderBy?: locationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, locationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the location model
   */
  readonly fields: locationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__locationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    canopy<T extends location$canopyArgs<ExtArgs> = {}>(args?: Subset<T, location$canopyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$canopyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the location model
   */ 
  interface locationFieldRefs {
    readonly id: FieldRef<"location", 'Int'>
    readonly region: FieldRef<"location", 'String'>
    readonly address: FieldRef<"location", 'String'>
  }
    

  // Custom InputTypes
  /**
   * location findUnique
   */
  export type locationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location findUniqueOrThrow
   */
  export type locationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location findFirst
   */
  export type locationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for locations.
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * location findFirstOrThrow
   */
  export type locationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which location to fetch.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for locations.
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * location findMany
   */
  export type locationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter, which locations to fetch.
     */
    where?: locationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of locations to fetch.
     */
    orderBy?: locationOrderByWithRelationInput | locationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing locations.
     */
    cursor?: locationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * location create
   */
  export type locationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * The data needed to create a location.
     */
    data: XOR<locationCreateInput, locationUncheckedCreateInput>
  }

  /**
   * location createMany
   */
  export type locationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many locations.
     */
    data: locationCreateManyInput | locationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * location update
   */
  export type locationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * The data needed to update a location.
     */
    data: XOR<locationUpdateInput, locationUncheckedUpdateInput>
    /**
     * Choose, which location to update.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location updateMany
   */
  export type locationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update locations.
     */
    data: XOR<locationUpdateManyMutationInput, locationUncheckedUpdateManyInput>
    /**
     * Filter which locations to update
     */
    where?: locationWhereInput
  }

  /**
   * location upsert
   */
  export type locationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * The filter to search for the location to update in case it exists.
     */
    where: locationWhereUniqueInput
    /**
     * In case the location found by the `where` argument doesn't exist, create a new location with this data.
     */
    create: XOR<locationCreateInput, locationUncheckedCreateInput>
    /**
     * In case the location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<locationUpdateInput, locationUncheckedUpdateInput>
  }

  /**
   * location delete
   */
  export type locationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
    /**
     * Filter which location to delete.
     */
    where: locationWhereUniqueInput
  }

  /**
   * location deleteMany
   */
  export type locationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which locations to delete
     */
    where?: locationWhereInput
  }

  /**
   * location.canopy
   */
  export type location$canopyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the canopy
     */
    select?: canopySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: canopyInclude<ExtArgs> | null
    where?: canopyWhereInput
    orderBy?: canopyOrderByWithRelationInput | canopyOrderByWithRelationInput[]
    cursor?: canopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CanopyScalarFieldEnum | CanopyScalarFieldEnum[]
  }

  /**
   * location without action
   */
  export type locationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the location
     */
    select?: locationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: locationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    password: 'password',
    name: 'name'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const BuyerScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    password: 'password',
    region: 'region',
    supervisor_name: 'supervisor_name',
    supervisor_phone: 'supervisor_phone'
  };

  export type BuyerScalarFieldEnum = (typeof BuyerScalarFieldEnum)[keyof typeof BuyerScalarFieldEnum]


  export const CanopyScalarFieldEnum: {
    id: 'id',
    manage_number: 'manage_number',
    class_number: 'class_number',
    location_id: 'location_id',
    buyer_id: 'buyer_id',
    status_fold: 'status_fold',
    status_motor: 'status_motor',
    status_led: 'status_led',
    status_sound: 'status_sound',
    status_inform: 'status_inform',
    status_temperature: 'status_temperature',
    status_transmit: 'status_transmit'
  };

  export type CanopyScalarFieldEnum = (typeof CanopyScalarFieldEnum)[keyof typeof CanopyScalarFieldEnum]


  export const ControlScalarFieldEnum: {
    id: 'id',
    canopy_id: 'canopy_id',
    buyer_id: 'buyer_id',
    fold: 'fold',
    motor: 'motor',
    led: 'led',
    sound: 'sound',
    inform: 'inform',
    timestamp: 'timestamp'
  };

  export type ControlScalarFieldEnum = (typeof ControlScalarFieldEnum)[keyof typeof ControlScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    region: 'region',
    address: 'address'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type adminWhereInput = {
    AND?: adminWhereInput | adminWhereInput[]
    OR?: adminWhereInput[]
    NOT?: adminWhereInput | adminWhereInput[]
    id?: IntFilter<"admin"> | number
    user_id?: StringFilter<"admin"> | string
    password?: StringFilter<"admin"> | string
    name?: StringFilter<"admin"> | string
  }

  export type adminOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type adminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    AND?: adminWhereInput | adminWhereInput[]
    OR?: adminWhereInput[]
    NOT?: adminWhereInput | adminWhereInput[]
    password?: StringFilter<"admin"> | string
    name?: StringFilter<"admin"> | string
  }, "id" | "user_id">

  export type adminOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
    _count?: adminCountOrderByAggregateInput
    _avg?: adminAvgOrderByAggregateInput
    _max?: adminMaxOrderByAggregateInput
    _min?: adminMinOrderByAggregateInput
    _sum?: adminSumOrderByAggregateInput
  }

  export type adminScalarWhereWithAggregatesInput = {
    AND?: adminScalarWhereWithAggregatesInput | adminScalarWhereWithAggregatesInput[]
    OR?: adminScalarWhereWithAggregatesInput[]
    NOT?: adminScalarWhereWithAggregatesInput | adminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"admin"> | number
    user_id?: StringWithAggregatesFilter<"admin"> | string
    password?: StringWithAggregatesFilter<"admin"> | string
    name?: StringWithAggregatesFilter<"admin"> | string
  }

  export type buyerWhereInput = {
    AND?: buyerWhereInput | buyerWhereInput[]
    OR?: buyerWhereInput[]
    NOT?: buyerWhereInput | buyerWhereInput[]
    id?: IntFilter<"buyer"> | number
    user_id?: StringFilter<"buyer"> | string
    password?: StringFilter<"buyer"> | string
    region?: StringFilter<"buyer"> | string
    supervisor_name?: StringFilter<"buyer"> | string
    supervisor_phone?: StringFilter<"buyer"> | string
    canopy?: CanopyListRelationFilter
    control?: ControlListRelationFilter
  }

  export type buyerOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
    canopy?: canopyOrderByRelationAggregateInput
    control?: controlOrderByRelationAggregateInput
  }

  export type buyerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    AND?: buyerWhereInput | buyerWhereInput[]
    OR?: buyerWhereInput[]
    NOT?: buyerWhereInput | buyerWhereInput[]
    password?: StringFilter<"buyer"> | string
    region?: StringFilter<"buyer"> | string
    supervisor_name?: StringFilter<"buyer"> | string
    supervisor_phone?: StringFilter<"buyer"> | string
    canopy?: CanopyListRelationFilter
    control?: ControlListRelationFilter
  }, "id" | "user_id">

  export type buyerOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
    _count?: buyerCountOrderByAggregateInput
    _avg?: buyerAvgOrderByAggregateInput
    _max?: buyerMaxOrderByAggregateInput
    _min?: buyerMinOrderByAggregateInput
    _sum?: buyerSumOrderByAggregateInput
  }

  export type buyerScalarWhereWithAggregatesInput = {
    AND?: buyerScalarWhereWithAggregatesInput | buyerScalarWhereWithAggregatesInput[]
    OR?: buyerScalarWhereWithAggregatesInput[]
    NOT?: buyerScalarWhereWithAggregatesInput | buyerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"buyer"> | number
    user_id?: StringWithAggregatesFilter<"buyer"> | string
    password?: StringWithAggregatesFilter<"buyer"> | string
    region?: StringWithAggregatesFilter<"buyer"> | string
    supervisor_name?: StringWithAggregatesFilter<"buyer"> | string
    supervisor_phone?: StringWithAggregatesFilter<"buyer"> | string
  }

  export type canopyWhereInput = {
    AND?: canopyWhereInput | canopyWhereInput[]
    OR?: canopyWhereInput[]
    NOT?: canopyWhereInput | canopyWhereInput[]
    id?: IntFilter<"canopy"> | number
    manage_number?: StringFilter<"canopy"> | string
    class_number?: StringFilter<"canopy"> | string
    location_id?: IntFilter<"canopy"> | number
    buyer_id?: IntNullableFilter<"canopy"> | number | null
    status_fold?: BoolNullableFilter<"canopy"> | boolean | null
    status_motor?: BoolNullableFilter<"canopy"> | boolean | null
    status_led?: BoolNullableFilter<"canopy"> | boolean | null
    status_sound?: BoolNullableFilter<"canopy"> | boolean | null
    status_inform?: BoolNullableFilter<"canopy"> | boolean | null
    status_temperature?: FloatNullableFilter<"canopy"> | number | null
    status_transmit?: BoolNullableFilter<"canopy"> | boolean | null
    buyer?: XOR<BuyerNullableRelationFilter, buyerWhereInput> | null
    location?: XOR<LocationRelationFilter, locationWhereInput>
    control?: ControlListRelationFilter
  }

  export type canopyOrderByWithRelationInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrderInput | SortOrder
    status_fold?: SortOrderInput | SortOrder
    status_motor?: SortOrderInput | SortOrder
    status_led?: SortOrderInput | SortOrder
    status_sound?: SortOrderInput | SortOrder
    status_inform?: SortOrderInput | SortOrder
    status_temperature?: SortOrderInput | SortOrder
    status_transmit?: SortOrderInput | SortOrder
    buyer?: buyerOrderByWithRelationInput
    location?: locationOrderByWithRelationInput
    control?: controlOrderByRelationAggregateInput
  }

  export type canopyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    manage_number?: string
    class_number?: string
    AND?: canopyWhereInput | canopyWhereInput[]
    OR?: canopyWhereInput[]
    NOT?: canopyWhereInput | canopyWhereInput[]
    location_id?: IntFilter<"canopy"> | number
    buyer_id?: IntNullableFilter<"canopy"> | number | null
    status_fold?: BoolNullableFilter<"canopy"> | boolean | null
    status_motor?: BoolNullableFilter<"canopy"> | boolean | null
    status_led?: BoolNullableFilter<"canopy"> | boolean | null
    status_sound?: BoolNullableFilter<"canopy"> | boolean | null
    status_inform?: BoolNullableFilter<"canopy"> | boolean | null
    status_temperature?: FloatNullableFilter<"canopy"> | number | null
    status_transmit?: BoolNullableFilter<"canopy"> | boolean | null
    buyer?: XOR<BuyerNullableRelationFilter, buyerWhereInput> | null
    location?: XOR<LocationRelationFilter, locationWhereInput>
    control?: ControlListRelationFilter
  }, "id" | "manage_number" | "class_number">

  export type canopyOrderByWithAggregationInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrderInput | SortOrder
    status_fold?: SortOrderInput | SortOrder
    status_motor?: SortOrderInput | SortOrder
    status_led?: SortOrderInput | SortOrder
    status_sound?: SortOrderInput | SortOrder
    status_inform?: SortOrderInput | SortOrder
    status_temperature?: SortOrderInput | SortOrder
    status_transmit?: SortOrderInput | SortOrder
    _count?: canopyCountOrderByAggregateInput
    _avg?: canopyAvgOrderByAggregateInput
    _max?: canopyMaxOrderByAggregateInput
    _min?: canopyMinOrderByAggregateInput
    _sum?: canopySumOrderByAggregateInput
  }

  export type canopyScalarWhereWithAggregatesInput = {
    AND?: canopyScalarWhereWithAggregatesInput | canopyScalarWhereWithAggregatesInput[]
    OR?: canopyScalarWhereWithAggregatesInput[]
    NOT?: canopyScalarWhereWithAggregatesInput | canopyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"canopy"> | number
    manage_number?: StringWithAggregatesFilter<"canopy"> | string
    class_number?: StringWithAggregatesFilter<"canopy"> | string
    location_id?: IntWithAggregatesFilter<"canopy"> | number
    buyer_id?: IntNullableWithAggregatesFilter<"canopy"> | number | null
    status_fold?: BoolNullableWithAggregatesFilter<"canopy"> | boolean | null
    status_motor?: BoolNullableWithAggregatesFilter<"canopy"> | boolean | null
    status_led?: BoolNullableWithAggregatesFilter<"canopy"> | boolean | null
    status_sound?: BoolNullableWithAggregatesFilter<"canopy"> | boolean | null
    status_inform?: BoolNullableWithAggregatesFilter<"canopy"> | boolean | null
    status_temperature?: FloatNullableWithAggregatesFilter<"canopy"> | number | null
    status_transmit?: BoolNullableWithAggregatesFilter<"canopy"> | boolean | null
  }

  export type controlWhereInput = {
    AND?: controlWhereInput | controlWhereInput[]
    OR?: controlWhereInput[]
    NOT?: controlWhereInput | controlWhereInput[]
    id?: IntFilter<"control"> | number
    canopy_id?: IntFilter<"control"> | number
    buyer_id?: IntFilter<"control"> | number
    fold?: BoolFilter<"control"> | boolean
    motor?: BoolFilter<"control"> | boolean
    led?: BoolFilter<"control"> | boolean
    sound?: BoolFilter<"control"> | boolean
    inform?: BoolFilter<"control"> | boolean
    timestamp?: DateTimeFilter<"control"> | Date | string
    buyer?: XOR<BuyerRelationFilter, buyerWhereInput>
    canopy?: XOR<CanopyRelationFilter, canopyWhereInput>
  }

  export type controlOrderByWithRelationInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
    buyer?: buyerOrderByWithRelationInput
    canopy?: canopyOrderByWithRelationInput
  }

  export type controlWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: controlWhereInput | controlWhereInput[]
    OR?: controlWhereInput[]
    NOT?: controlWhereInput | controlWhereInput[]
    canopy_id?: IntFilter<"control"> | number
    buyer_id?: IntFilter<"control"> | number
    fold?: BoolFilter<"control"> | boolean
    motor?: BoolFilter<"control"> | boolean
    led?: BoolFilter<"control"> | boolean
    sound?: BoolFilter<"control"> | boolean
    inform?: BoolFilter<"control"> | boolean
    timestamp?: DateTimeFilter<"control"> | Date | string
    buyer?: XOR<BuyerRelationFilter, buyerWhereInput>
    canopy?: XOR<CanopyRelationFilter, canopyWhereInput>
  }, "id">

  export type controlOrderByWithAggregationInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
    _count?: controlCountOrderByAggregateInput
    _avg?: controlAvgOrderByAggregateInput
    _max?: controlMaxOrderByAggregateInput
    _min?: controlMinOrderByAggregateInput
    _sum?: controlSumOrderByAggregateInput
  }

  export type controlScalarWhereWithAggregatesInput = {
    AND?: controlScalarWhereWithAggregatesInput | controlScalarWhereWithAggregatesInput[]
    OR?: controlScalarWhereWithAggregatesInput[]
    NOT?: controlScalarWhereWithAggregatesInput | controlScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"control"> | number
    canopy_id?: IntWithAggregatesFilter<"control"> | number
    buyer_id?: IntWithAggregatesFilter<"control"> | number
    fold?: BoolWithAggregatesFilter<"control"> | boolean
    motor?: BoolWithAggregatesFilter<"control"> | boolean
    led?: BoolWithAggregatesFilter<"control"> | boolean
    sound?: BoolWithAggregatesFilter<"control"> | boolean
    inform?: BoolWithAggregatesFilter<"control"> | boolean
    timestamp?: DateTimeWithAggregatesFilter<"control"> | Date | string
  }

  export type locationWhereInput = {
    AND?: locationWhereInput | locationWhereInput[]
    OR?: locationWhereInput[]
    NOT?: locationWhereInput | locationWhereInput[]
    id?: IntFilter<"location"> | number
    region?: StringFilter<"location"> | string
    address?: StringFilter<"location"> | string
    canopy?: CanopyListRelationFilter
  }

  export type locationOrderByWithRelationInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
    canopy?: canopyOrderByRelationAggregateInput
  }

  export type locationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    address?: string
    AND?: locationWhereInput | locationWhereInput[]
    OR?: locationWhereInput[]
    NOT?: locationWhereInput | locationWhereInput[]
    region?: StringFilter<"location"> | string
    canopy?: CanopyListRelationFilter
  }, "id" | "address">

  export type locationOrderByWithAggregationInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
    _count?: locationCountOrderByAggregateInput
    _avg?: locationAvgOrderByAggregateInput
    _max?: locationMaxOrderByAggregateInput
    _min?: locationMinOrderByAggregateInput
    _sum?: locationSumOrderByAggregateInput
  }

  export type locationScalarWhereWithAggregatesInput = {
    AND?: locationScalarWhereWithAggregatesInput | locationScalarWhereWithAggregatesInput[]
    OR?: locationScalarWhereWithAggregatesInput[]
    NOT?: locationScalarWhereWithAggregatesInput | locationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"location"> | number
    region?: StringWithAggregatesFilter<"location"> | string
    address?: StringWithAggregatesFilter<"location"> | string
  }

  export type adminCreateInput = {
    user_id: string
    password: string
    name: string
  }

  export type adminUncheckedCreateInput = {
    id?: number
    user_id: string
    password: string
    name: string
  }

  export type adminUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type adminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type adminCreateManyInput = {
    id?: number
    user_id: string
    password: string
    name: string
  }

  export type adminUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type adminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type buyerCreateInput = {
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopy?: canopyCreateNestedManyWithoutBuyerInput
    control?: controlCreateNestedManyWithoutBuyerInput
  }

  export type buyerUncheckedCreateInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopy?: canopyUncheckedCreateNestedManyWithoutBuyerInput
    control?: controlUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type buyerUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopy?: canopyUpdateManyWithoutBuyerNestedInput
    control?: controlUpdateManyWithoutBuyerNestedInput
  }

  export type buyerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopy?: canopyUncheckedUpdateManyWithoutBuyerNestedInput
    control?: controlUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type buyerCreateManyInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
  }

  export type buyerUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
  }

  export type buyerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
  }

  export type canopyCreateInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    buyer?: buyerCreateNestedOneWithoutCanopyInput
    location: locationCreateNestedOneWithoutCanopyInput
    control?: controlCreateNestedManyWithoutCanopyInput
  }

  export type canopyUncheckedCreateInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    control?: controlUncheckedCreateNestedManyWithoutCanopyInput
  }

  export type canopyUpdateInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyer?: buyerUpdateOneWithoutCanopyNestedInput
    location?: locationUpdateOneRequiredWithoutCanopyNestedInput
    control?: controlUpdateManyWithoutCanopyNestedInput
  }

  export type canopyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    control?: controlUncheckedUpdateManyWithoutCanopyNestedInput
  }

  export type canopyCreateManyInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type canopyUpdateManyMutationInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type canopyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type controlCreateInput = {
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
    buyer: buyerCreateNestedOneWithoutControlInput
    canopy: canopyCreateNestedOneWithoutControlInput
  }

  export type controlUncheckedCreateInput = {
    id?: number
    canopy_id: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type controlUpdateInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: buyerUpdateOneRequiredWithoutControlNestedInput
    canopy?: canopyUpdateOneRequiredWithoutControlNestedInput
  }

  export type controlUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type controlCreateManyInput = {
    id?: number
    canopy_id: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type controlUpdateManyMutationInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type controlUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type locationCreateInput = {
    region: string
    address: string
    canopy?: canopyCreateNestedManyWithoutLocationInput
  }

  export type locationUncheckedCreateInput = {
    id?: number
    region: string
    address: string
    canopy?: canopyUncheckedCreateNestedManyWithoutLocationInput
  }

  export type locationUpdateInput = {
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    canopy?: canopyUpdateManyWithoutLocationNestedInput
  }

  export type locationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    canopy?: canopyUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type locationCreateManyInput = {
    id?: number
    region: string
    address: string
  }

  export type locationUpdateManyMutationInput = {
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type locationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type adminCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type adminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type adminMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type adminMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    name?: SortOrder
  }

  export type adminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CanopyListRelationFilter = {
    every?: canopyWhereInput
    some?: canopyWhereInput
    none?: canopyWhereInput
  }

  export type ControlListRelationFilter = {
    every?: controlWhereInput
    some?: controlWhereInput
    none?: controlWhereInput
  }

  export type canopyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type controlOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type buyerCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
  }

  export type buyerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type buyerMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
  }

  export type buyerMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    password?: SortOrder
    region?: SortOrder
    supervisor_name?: SortOrder
    supervisor_phone?: SortOrder
  }

  export type buyerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BuyerNullableRelationFilter = {
    is?: buyerWhereInput | null
    isNot?: buyerWhereInput | null
  }

  export type LocationRelationFilter = {
    is?: locationWhereInput
    isNot?: locationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type canopyCountOrderByAggregateInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_fold?: SortOrder
    status_motor?: SortOrder
    status_led?: SortOrder
    status_sound?: SortOrder
    status_inform?: SortOrder
    status_temperature?: SortOrder
    status_transmit?: SortOrder
  }

  export type canopyAvgOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_temperature?: SortOrder
  }

  export type canopyMaxOrderByAggregateInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_fold?: SortOrder
    status_motor?: SortOrder
    status_led?: SortOrder
    status_sound?: SortOrder
    status_inform?: SortOrder
    status_temperature?: SortOrder
    status_transmit?: SortOrder
  }

  export type canopyMinOrderByAggregateInput = {
    id?: SortOrder
    manage_number?: SortOrder
    class_number?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_fold?: SortOrder
    status_motor?: SortOrder
    status_led?: SortOrder
    status_sound?: SortOrder
    status_inform?: SortOrder
    status_temperature?: SortOrder
    status_transmit?: SortOrder
  }

  export type canopySumOrderByAggregateInput = {
    id?: SortOrder
    location_id?: SortOrder
    buyer_id?: SortOrder
    status_temperature?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BuyerRelationFilter = {
    is?: buyerWhereInput
    isNot?: buyerWhereInput
  }

  export type CanopyRelationFilter = {
    is?: canopyWhereInput
    isNot?: canopyWhereInput
  }

  export type controlCountOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
  }

  export type controlAvgOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
  }

  export type controlMaxOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
  }

  export type controlMinOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
    fold?: SortOrder
    motor?: SortOrder
    led?: SortOrder
    sound?: SortOrder
    inform?: SortOrder
    timestamp?: SortOrder
  }

  export type controlSumOrderByAggregateInput = {
    id?: SortOrder
    canopy_id?: SortOrder
    buyer_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type locationCountOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
  }

  export type locationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type locationMaxOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
  }

  export type locationMinOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    address?: SortOrder
  }

  export type locationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type canopyCreateNestedManyWithoutBuyerInput = {
    create?: XOR<canopyCreateWithoutBuyerInput, canopyUncheckedCreateWithoutBuyerInput> | canopyCreateWithoutBuyerInput[] | canopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutBuyerInput | canopyCreateOrConnectWithoutBuyerInput[]
    createMany?: canopyCreateManyBuyerInputEnvelope
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
  }

  export type controlCreateNestedManyWithoutBuyerInput = {
    create?: XOR<controlCreateWithoutBuyerInput, controlUncheckedCreateWithoutBuyerInput> | controlCreateWithoutBuyerInput[] | controlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: controlCreateOrConnectWithoutBuyerInput | controlCreateOrConnectWithoutBuyerInput[]
    createMany?: controlCreateManyBuyerInputEnvelope
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
  }

  export type canopyUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<canopyCreateWithoutBuyerInput, canopyUncheckedCreateWithoutBuyerInput> | canopyCreateWithoutBuyerInput[] | canopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutBuyerInput | canopyCreateOrConnectWithoutBuyerInput[]
    createMany?: canopyCreateManyBuyerInputEnvelope
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
  }

  export type controlUncheckedCreateNestedManyWithoutBuyerInput = {
    create?: XOR<controlCreateWithoutBuyerInput, controlUncheckedCreateWithoutBuyerInput> | controlCreateWithoutBuyerInput[] | controlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: controlCreateOrConnectWithoutBuyerInput | controlCreateOrConnectWithoutBuyerInput[]
    createMany?: controlCreateManyBuyerInputEnvelope
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
  }

  export type canopyUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<canopyCreateWithoutBuyerInput, canopyUncheckedCreateWithoutBuyerInput> | canopyCreateWithoutBuyerInput[] | canopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutBuyerInput | canopyCreateOrConnectWithoutBuyerInput[]
    upsert?: canopyUpsertWithWhereUniqueWithoutBuyerInput | canopyUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: canopyCreateManyBuyerInputEnvelope
    set?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    disconnect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    delete?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    update?: canopyUpdateWithWhereUniqueWithoutBuyerInput | canopyUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: canopyUpdateManyWithWhereWithoutBuyerInput | canopyUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: canopyScalarWhereInput | canopyScalarWhereInput[]
  }

  export type controlUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<controlCreateWithoutBuyerInput, controlUncheckedCreateWithoutBuyerInput> | controlCreateWithoutBuyerInput[] | controlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: controlCreateOrConnectWithoutBuyerInput | controlCreateOrConnectWithoutBuyerInput[]
    upsert?: controlUpsertWithWhereUniqueWithoutBuyerInput | controlUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: controlCreateManyBuyerInputEnvelope
    set?: controlWhereUniqueInput | controlWhereUniqueInput[]
    disconnect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    delete?: controlWhereUniqueInput | controlWhereUniqueInput[]
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    update?: controlUpdateWithWhereUniqueWithoutBuyerInput | controlUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: controlUpdateManyWithWhereWithoutBuyerInput | controlUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: controlScalarWhereInput | controlScalarWhereInput[]
  }

  export type canopyUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<canopyCreateWithoutBuyerInput, canopyUncheckedCreateWithoutBuyerInput> | canopyCreateWithoutBuyerInput[] | canopyUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutBuyerInput | canopyCreateOrConnectWithoutBuyerInput[]
    upsert?: canopyUpsertWithWhereUniqueWithoutBuyerInput | canopyUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: canopyCreateManyBuyerInputEnvelope
    set?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    disconnect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    delete?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    update?: canopyUpdateWithWhereUniqueWithoutBuyerInput | canopyUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: canopyUpdateManyWithWhereWithoutBuyerInput | canopyUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: canopyScalarWhereInput | canopyScalarWhereInput[]
  }

  export type controlUncheckedUpdateManyWithoutBuyerNestedInput = {
    create?: XOR<controlCreateWithoutBuyerInput, controlUncheckedCreateWithoutBuyerInput> | controlCreateWithoutBuyerInput[] | controlUncheckedCreateWithoutBuyerInput[]
    connectOrCreate?: controlCreateOrConnectWithoutBuyerInput | controlCreateOrConnectWithoutBuyerInput[]
    upsert?: controlUpsertWithWhereUniqueWithoutBuyerInput | controlUpsertWithWhereUniqueWithoutBuyerInput[]
    createMany?: controlCreateManyBuyerInputEnvelope
    set?: controlWhereUniqueInput | controlWhereUniqueInput[]
    disconnect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    delete?: controlWhereUniqueInput | controlWhereUniqueInput[]
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    update?: controlUpdateWithWhereUniqueWithoutBuyerInput | controlUpdateWithWhereUniqueWithoutBuyerInput[]
    updateMany?: controlUpdateManyWithWhereWithoutBuyerInput | controlUpdateManyWithWhereWithoutBuyerInput[]
    deleteMany?: controlScalarWhereInput | controlScalarWhereInput[]
  }

  export type buyerCreateNestedOneWithoutCanopyInput = {
    create?: XOR<buyerCreateWithoutCanopyInput, buyerUncheckedCreateWithoutCanopyInput>
    connectOrCreate?: buyerCreateOrConnectWithoutCanopyInput
    connect?: buyerWhereUniqueInput
  }

  export type locationCreateNestedOneWithoutCanopyInput = {
    create?: XOR<locationCreateWithoutCanopyInput, locationUncheckedCreateWithoutCanopyInput>
    connectOrCreate?: locationCreateOrConnectWithoutCanopyInput
    connect?: locationWhereUniqueInput
  }

  export type controlCreateNestedManyWithoutCanopyInput = {
    create?: XOR<controlCreateWithoutCanopyInput, controlUncheckedCreateWithoutCanopyInput> | controlCreateWithoutCanopyInput[] | controlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: controlCreateOrConnectWithoutCanopyInput | controlCreateOrConnectWithoutCanopyInput[]
    createMany?: controlCreateManyCanopyInputEnvelope
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
  }

  export type controlUncheckedCreateNestedManyWithoutCanopyInput = {
    create?: XOR<controlCreateWithoutCanopyInput, controlUncheckedCreateWithoutCanopyInput> | controlCreateWithoutCanopyInput[] | controlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: controlCreateOrConnectWithoutCanopyInput | controlCreateOrConnectWithoutCanopyInput[]
    createMany?: controlCreateManyCanopyInputEnvelope
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type buyerUpdateOneWithoutCanopyNestedInput = {
    create?: XOR<buyerCreateWithoutCanopyInput, buyerUncheckedCreateWithoutCanopyInput>
    connectOrCreate?: buyerCreateOrConnectWithoutCanopyInput
    upsert?: buyerUpsertWithoutCanopyInput
    disconnect?: buyerWhereInput | boolean
    delete?: buyerWhereInput | boolean
    connect?: buyerWhereUniqueInput
    update?: XOR<XOR<buyerUpdateToOneWithWhereWithoutCanopyInput, buyerUpdateWithoutCanopyInput>, buyerUncheckedUpdateWithoutCanopyInput>
  }

  export type locationUpdateOneRequiredWithoutCanopyNestedInput = {
    create?: XOR<locationCreateWithoutCanopyInput, locationUncheckedCreateWithoutCanopyInput>
    connectOrCreate?: locationCreateOrConnectWithoutCanopyInput
    upsert?: locationUpsertWithoutCanopyInput
    connect?: locationWhereUniqueInput
    update?: XOR<XOR<locationUpdateToOneWithWhereWithoutCanopyInput, locationUpdateWithoutCanopyInput>, locationUncheckedUpdateWithoutCanopyInput>
  }

  export type controlUpdateManyWithoutCanopyNestedInput = {
    create?: XOR<controlCreateWithoutCanopyInput, controlUncheckedCreateWithoutCanopyInput> | controlCreateWithoutCanopyInput[] | controlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: controlCreateOrConnectWithoutCanopyInput | controlCreateOrConnectWithoutCanopyInput[]
    upsert?: controlUpsertWithWhereUniqueWithoutCanopyInput | controlUpsertWithWhereUniqueWithoutCanopyInput[]
    createMany?: controlCreateManyCanopyInputEnvelope
    set?: controlWhereUniqueInput | controlWhereUniqueInput[]
    disconnect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    delete?: controlWhereUniqueInput | controlWhereUniqueInput[]
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    update?: controlUpdateWithWhereUniqueWithoutCanopyInput | controlUpdateWithWhereUniqueWithoutCanopyInput[]
    updateMany?: controlUpdateManyWithWhereWithoutCanopyInput | controlUpdateManyWithWhereWithoutCanopyInput[]
    deleteMany?: controlScalarWhereInput | controlScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type controlUncheckedUpdateManyWithoutCanopyNestedInput = {
    create?: XOR<controlCreateWithoutCanopyInput, controlUncheckedCreateWithoutCanopyInput> | controlCreateWithoutCanopyInput[] | controlUncheckedCreateWithoutCanopyInput[]
    connectOrCreate?: controlCreateOrConnectWithoutCanopyInput | controlCreateOrConnectWithoutCanopyInput[]
    upsert?: controlUpsertWithWhereUniqueWithoutCanopyInput | controlUpsertWithWhereUniqueWithoutCanopyInput[]
    createMany?: controlCreateManyCanopyInputEnvelope
    set?: controlWhereUniqueInput | controlWhereUniqueInput[]
    disconnect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    delete?: controlWhereUniqueInput | controlWhereUniqueInput[]
    connect?: controlWhereUniqueInput | controlWhereUniqueInput[]
    update?: controlUpdateWithWhereUniqueWithoutCanopyInput | controlUpdateWithWhereUniqueWithoutCanopyInput[]
    updateMany?: controlUpdateManyWithWhereWithoutCanopyInput | controlUpdateManyWithWhereWithoutCanopyInput[]
    deleteMany?: controlScalarWhereInput | controlScalarWhereInput[]
  }

  export type buyerCreateNestedOneWithoutControlInput = {
    create?: XOR<buyerCreateWithoutControlInput, buyerUncheckedCreateWithoutControlInput>
    connectOrCreate?: buyerCreateOrConnectWithoutControlInput
    connect?: buyerWhereUniqueInput
  }

  export type canopyCreateNestedOneWithoutControlInput = {
    create?: XOR<canopyCreateWithoutControlInput, canopyUncheckedCreateWithoutControlInput>
    connectOrCreate?: canopyCreateOrConnectWithoutControlInput
    connect?: canopyWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type buyerUpdateOneRequiredWithoutControlNestedInput = {
    create?: XOR<buyerCreateWithoutControlInput, buyerUncheckedCreateWithoutControlInput>
    connectOrCreate?: buyerCreateOrConnectWithoutControlInput
    upsert?: buyerUpsertWithoutControlInput
    connect?: buyerWhereUniqueInput
    update?: XOR<XOR<buyerUpdateToOneWithWhereWithoutControlInput, buyerUpdateWithoutControlInput>, buyerUncheckedUpdateWithoutControlInput>
  }

  export type canopyUpdateOneRequiredWithoutControlNestedInput = {
    create?: XOR<canopyCreateWithoutControlInput, canopyUncheckedCreateWithoutControlInput>
    connectOrCreate?: canopyCreateOrConnectWithoutControlInput
    upsert?: canopyUpsertWithoutControlInput
    connect?: canopyWhereUniqueInput
    update?: XOR<XOR<canopyUpdateToOneWithWhereWithoutControlInput, canopyUpdateWithoutControlInput>, canopyUncheckedUpdateWithoutControlInput>
  }

  export type canopyCreateNestedManyWithoutLocationInput = {
    create?: XOR<canopyCreateWithoutLocationInput, canopyUncheckedCreateWithoutLocationInput> | canopyCreateWithoutLocationInput[] | canopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutLocationInput | canopyCreateOrConnectWithoutLocationInput[]
    createMany?: canopyCreateManyLocationInputEnvelope
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
  }

  export type canopyUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<canopyCreateWithoutLocationInput, canopyUncheckedCreateWithoutLocationInput> | canopyCreateWithoutLocationInput[] | canopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutLocationInput | canopyCreateOrConnectWithoutLocationInput[]
    createMany?: canopyCreateManyLocationInputEnvelope
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
  }

  export type canopyUpdateManyWithoutLocationNestedInput = {
    create?: XOR<canopyCreateWithoutLocationInput, canopyUncheckedCreateWithoutLocationInput> | canopyCreateWithoutLocationInput[] | canopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutLocationInput | canopyCreateOrConnectWithoutLocationInput[]
    upsert?: canopyUpsertWithWhereUniqueWithoutLocationInput | canopyUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: canopyCreateManyLocationInputEnvelope
    set?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    disconnect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    delete?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    update?: canopyUpdateWithWhereUniqueWithoutLocationInput | canopyUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: canopyUpdateManyWithWhereWithoutLocationInput | canopyUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: canopyScalarWhereInput | canopyScalarWhereInput[]
  }

  export type canopyUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<canopyCreateWithoutLocationInput, canopyUncheckedCreateWithoutLocationInput> | canopyCreateWithoutLocationInput[] | canopyUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: canopyCreateOrConnectWithoutLocationInput | canopyCreateOrConnectWithoutLocationInput[]
    upsert?: canopyUpsertWithWhereUniqueWithoutLocationInput | canopyUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: canopyCreateManyLocationInputEnvelope
    set?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    disconnect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    delete?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    connect?: canopyWhereUniqueInput | canopyWhereUniqueInput[]
    update?: canopyUpdateWithWhereUniqueWithoutLocationInput | canopyUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: canopyUpdateManyWithWhereWithoutLocationInput | canopyUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: canopyScalarWhereInput | canopyScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type canopyCreateWithoutBuyerInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    location: locationCreateNestedOneWithoutCanopyInput
    control?: controlCreateNestedManyWithoutCanopyInput
  }

  export type canopyUncheckedCreateWithoutBuyerInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    control?: controlUncheckedCreateNestedManyWithoutCanopyInput
  }

  export type canopyCreateOrConnectWithoutBuyerInput = {
    where: canopyWhereUniqueInput
    create: XOR<canopyCreateWithoutBuyerInput, canopyUncheckedCreateWithoutBuyerInput>
  }

  export type canopyCreateManyBuyerInputEnvelope = {
    data: canopyCreateManyBuyerInput | canopyCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type controlCreateWithoutBuyerInput = {
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
    canopy: canopyCreateNestedOneWithoutControlInput
  }

  export type controlUncheckedCreateWithoutBuyerInput = {
    id?: number
    canopy_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type controlCreateOrConnectWithoutBuyerInput = {
    where: controlWhereUniqueInput
    create: XOR<controlCreateWithoutBuyerInput, controlUncheckedCreateWithoutBuyerInput>
  }

  export type controlCreateManyBuyerInputEnvelope = {
    data: controlCreateManyBuyerInput | controlCreateManyBuyerInput[]
    skipDuplicates?: boolean
  }

  export type canopyUpsertWithWhereUniqueWithoutBuyerInput = {
    where: canopyWhereUniqueInput
    update: XOR<canopyUpdateWithoutBuyerInput, canopyUncheckedUpdateWithoutBuyerInput>
    create: XOR<canopyCreateWithoutBuyerInput, canopyUncheckedCreateWithoutBuyerInput>
  }

  export type canopyUpdateWithWhereUniqueWithoutBuyerInput = {
    where: canopyWhereUniqueInput
    data: XOR<canopyUpdateWithoutBuyerInput, canopyUncheckedUpdateWithoutBuyerInput>
  }

  export type canopyUpdateManyWithWhereWithoutBuyerInput = {
    where: canopyScalarWhereInput
    data: XOR<canopyUpdateManyMutationInput, canopyUncheckedUpdateManyWithoutBuyerInput>
  }

  export type canopyScalarWhereInput = {
    AND?: canopyScalarWhereInput | canopyScalarWhereInput[]
    OR?: canopyScalarWhereInput[]
    NOT?: canopyScalarWhereInput | canopyScalarWhereInput[]
    id?: IntFilter<"canopy"> | number
    manage_number?: StringFilter<"canopy"> | string
    class_number?: StringFilter<"canopy"> | string
    location_id?: IntFilter<"canopy"> | number
    buyer_id?: IntNullableFilter<"canopy"> | number | null
    status_fold?: BoolNullableFilter<"canopy"> | boolean | null
    status_motor?: BoolNullableFilter<"canopy"> | boolean | null
    status_led?: BoolNullableFilter<"canopy"> | boolean | null
    status_sound?: BoolNullableFilter<"canopy"> | boolean | null
    status_inform?: BoolNullableFilter<"canopy"> | boolean | null
    status_temperature?: FloatNullableFilter<"canopy"> | number | null
    status_transmit?: BoolNullableFilter<"canopy"> | boolean | null
  }

  export type controlUpsertWithWhereUniqueWithoutBuyerInput = {
    where: controlWhereUniqueInput
    update: XOR<controlUpdateWithoutBuyerInput, controlUncheckedUpdateWithoutBuyerInput>
    create: XOR<controlCreateWithoutBuyerInput, controlUncheckedCreateWithoutBuyerInput>
  }

  export type controlUpdateWithWhereUniqueWithoutBuyerInput = {
    where: controlWhereUniqueInput
    data: XOR<controlUpdateWithoutBuyerInput, controlUncheckedUpdateWithoutBuyerInput>
  }

  export type controlUpdateManyWithWhereWithoutBuyerInput = {
    where: controlScalarWhereInput
    data: XOR<controlUpdateManyMutationInput, controlUncheckedUpdateManyWithoutBuyerInput>
  }

  export type controlScalarWhereInput = {
    AND?: controlScalarWhereInput | controlScalarWhereInput[]
    OR?: controlScalarWhereInput[]
    NOT?: controlScalarWhereInput | controlScalarWhereInput[]
    id?: IntFilter<"control"> | number
    canopy_id?: IntFilter<"control"> | number
    buyer_id?: IntFilter<"control"> | number
    fold?: BoolFilter<"control"> | boolean
    motor?: BoolFilter<"control"> | boolean
    led?: BoolFilter<"control"> | boolean
    sound?: BoolFilter<"control"> | boolean
    inform?: BoolFilter<"control"> | boolean
    timestamp?: DateTimeFilter<"control"> | Date | string
  }

  export type buyerCreateWithoutCanopyInput = {
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    control?: controlCreateNestedManyWithoutBuyerInput
  }

  export type buyerUncheckedCreateWithoutCanopyInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    control?: controlUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type buyerCreateOrConnectWithoutCanopyInput = {
    where: buyerWhereUniqueInput
    create: XOR<buyerCreateWithoutCanopyInput, buyerUncheckedCreateWithoutCanopyInput>
  }

  export type locationCreateWithoutCanopyInput = {
    region: string
    address: string
  }

  export type locationUncheckedCreateWithoutCanopyInput = {
    id?: number
    region: string
    address: string
  }

  export type locationCreateOrConnectWithoutCanopyInput = {
    where: locationWhereUniqueInput
    create: XOR<locationCreateWithoutCanopyInput, locationUncheckedCreateWithoutCanopyInput>
  }

  export type controlCreateWithoutCanopyInput = {
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
    buyer: buyerCreateNestedOneWithoutControlInput
  }

  export type controlUncheckedCreateWithoutCanopyInput = {
    id?: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type controlCreateOrConnectWithoutCanopyInput = {
    where: controlWhereUniqueInput
    create: XOR<controlCreateWithoutCanopyInput, controlUncheckedCreateWithoutCanopyInput>
  }

  export type controlCreateManyCanopyInputEnvelope = {
    data: controlCreateManyCanopyInput | controlCreateManyCanopyInput[]
    skipDuplicates?: boolean
  }

  export type buyerUpsertWithoutCanopyInput = {
    update: XOR<buyerUpdateWithoutCanopyInput, buyerUncheckedUpdateWithoutCanopyInput>
    create: XOR<buyerCreateWithoutCanopyInput, buyerUncheckedCreateWithoutCanopyInput>
    where?: buyerWhereInput
  }

  export type buyerUpdateToOneWithWhereWithoutCanopyInput = {
    where?: buyerWhereInput
    data: XOR<buyerUpdateWithoutCanopyInput, buyerUncheckedUpdateWithoutCanopyInput>
  }

  export type buyerUpdateWithoutCanopyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    control?: controlUpdateManyWithoutBuyerNestedInput
  }

  export type buyerUncheckedUpdateWithoutCanopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    control?: controlUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type locationUpsertWithoutCanopyInput = {
    update: XOR<locationUpdateWithoutCanopyInput, locationUncheckedUpdateWithoutCanopyInput>
    create: XOR<locationCreateWithoutCanopyInput, locationUncheckedCreateWithoutCanopyInput>
    where?: locationWhereInput
  }

  export type locationUpdateToOneWithWhereWithoutCanopyInput = {
    where?: locationWhereInput
    data: XOR<locationUpdateWithoutCanopyInput, locationUncheckedUpdateWithoutCanopyInput>
  }

  export type locationUpdateWithoutCanopyInput = {
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type locationUncheckedUpdateWithoutCanopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type controlUpsertWithWhereUniqueWithoutCanopyInput = {
    where: controlWhereUniqueInput
    update: XOR<controlUpdateWithoutCanopyInput, controlUncheckedUpdateWithoutCanopyInput>
    create: XOR<controlCreateWithoutCanopyInput, controlUncheckedCreateWithoutCanopyInput>
  }

  export type controlUpdateWithWhereUniqueWithoutCanopyInput = {
    where: controlWhereUniqueInput
    data: XOR<controlUpdateWithoutCanopyInput, controlUncheckedUpdateWithoutCanopyInput>
  }

  export type controlUpdateManyWithWhereWithoutCanopyInput = {
    where: controlScalarWhereInput
    data: XOR<controlUpdateManyMutationInput, controlUncheckedUpdateManyWithoutCanopyInput>
  }

  export type buyerCreateWithoutControlInput = {
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopy?: canopyCreateNestedManyWithoutBuyerInput
  }

  export type buyerUncheckedCreateWithoutControlInput = {
    id?: number
    user_id: string
    password: string
    region: string
    supervisor_name: string
    supervisor_phone: string
    canopy?: canopyUncheckedCreateNestedManyWithoutBuyerInput
  }

  export type buyerCreateOrConnectWithoutControlInput = {
    where: buyerWhereUniqueInput
    create: XOR<buyerCreateWithoutControlInput, buyerUncheckedCreateWithoutControlInput>
  }

  export type canopyCreateWithoutControlInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    buyer?: buyerCreateNestedOneWithoutCanopyInput
    location: locationCreateNestedOneWithoutCanopyInput
  }

  export type canopyUncheckedCreateWithoutControlInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type canopyCreateOrConnectWithoutControlInput = {
    where: canopyWhereUniqueInput
    create: XOR<canopyCreateWithoutControlInput, canopyUncheckedCreateWithoutControlInput>
  }

  export type buyerUpsertWithoutControlInput = {
    update: XOR<buyerUpdateWithoutControlInput, buyerUncheckedUpdateWithoutControlInput>
    create: XOR<buyerCreateWithoutControlInput, buyerUncheckedCreateWithoutControlInput>
    where?: buyerWhereInput
  }

  export type buyerUpdateToOneWithWhereWithoutControlInput = {
    where?: buyerWhereInput
    data: XOR<buyerUpdateWithoutControlInput, buyerUncheckedUpdateWithoutControlInput>
  }

  export type buyerUpdateWithoutControlInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopy?: canopyUpdateManyWithoutBuyerNestedInput
  }

  export type buyerUncheckedUpdateWithoutControlInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    supervisor_name?: StringFieldUpdateOperationsInput | string
    supervisor_phone?: StringFieldUpdateOperationsInput | string
    canopy?: canopyUncheckedUpdateManyWithoutBuyerNestedInput
  }

  export type canopyUpsertWithoutControlInput = {
    update: XOR<canopyUpdateWithoutControlInput, canopyUncheckedUpdateWithoutControlInput>
    create: XOR<canopyCreateWithoutControlInput, canopyUncheckedCreateWithoutControlInput>
    where?: canopyWhereInput
  }

  export type canopyUpdateToOneWithWhereWithoutControlInput = {
    where?: canopyWhereInput
    data: XOR<canopyUpdateWithoutControlInput, canopyUncheckedUpdateWithoutControlInput>
  }

  export type canopyUpdateWithoutControlInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyer?: buyerUpdateOneWithoutCanopyNestedInput
    location?: locationUpdateOneRequiredWithoutCanopyNestedInput
  }

  export type canopyUncheckedUpdateWithoutControlInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type canopyCreateWithoutLocationInput = {
    manage_number: string
    class_number: string
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    buyer?: buyerCreateNestedOneWithoutCanopyInput
    control?: controlCreateNestedManyWithoutCanopyInput
  }

  export type canopyUncheckedCreateWithoutLocationInput = {
    id?: number
    manage_number: string
    class_number: string
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
    control?: controlUncheckedCreateNestedManyWithoutCanopyInput
  }

  export type canopyCreateOrConnectWithoutLocationInput = {
    where: canopyWhereUniqueInput
    create: XOR<canopyCreateWithoutLocationInput, canopyUncheckedCreateWithoutLocationInput>
  }

  export type canopyCreateManyLocationInputEnvelope = {
    data: canopyCreateManyLocationInput | canopyCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type canopyUpsertWithWhereUniqueWithoutLocationInput = {
    where: canopyWhereUniqueInput
    update: XOR<canopyUpdateWithoutLocationInput, canopyUncheckedUpdateWithoutLocationInput>
    create: XOR<canopyCreateWithoutLocationInput, canopyUncheckedCreateWithoutLocationInput>
  }

  export type canopyUpdateWithWhereUniqueWithoutLocationInput = {
    where: canopyWhereUniqueInput
    data: XOR<canopyUpdateWithoutLocationInput, canopyUncheckedUpdateWithoutLocationInput>
  }

  export type canopyUpdateManyWithWhereWithoutLocationInput = {
    where: canopyScalarWhereInput
    data: XOR<canopyUpdateManyMutationInput, canopyUncheckedUpdateManyWithoutLocationInput>
  }

  export type canopyCreateManyBuyerInput = {
    id?: number
    manage_number: string
    class_number: string
    location_id: number
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type controlCreateManyBuyerInput = {
    id?: number
    canopy_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type canopyUpdateWithoutBuyerInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    location?: locationUpdateOneRequiredWithoutCanopyNestedInput
    control?: controlUpdateManyWithoutCanopyNestedInput
  }

  export type canopyUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    control?: controlUncheckedUpdateManyWithoutCanopyNestedInput
  }

  export type canopyUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    location_id?: IntFieldUpdateOperationsInput | number
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type controlUpdateWithoutBuyerInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    canopy?: canopyUpdateOneRequiredWithoutControlNestedInput
  }

  export type controlUncheckedUpdateWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type controlUncheckedUpdateManyWithoutBuyerInput = {
    id?: IntFieldUpdateOperationsInput | number
    canopy_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type controlCreateManyCanopyInput = {
    id?: number
    buyer_id: number
    fold: boolean
    motor: boolean
    led: boolean
    sound: boolean
    inform: boolean
    timestamp: Date | string
  }

  export type controlUpdateWithoutCanopyInput = {
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    buyer?: buyerUpdateOneRequiredWithoutControlNestedInput
  }

  export type controlUncheckedUpdateWithoutCanopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type controlUncheckedUpdateManyWithoutCanopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    buyer_id?: IntFieldUpdateOperationsInput | number
    fold?: BoolFieldUpdateOperationsInput | boolean
    motor?: BoolFieldUpdateOperationsInput | boolean
    led?: BoolFieldUpdateOperationsInput | boolean
    sound?: BoolFieldUpdateOperationsInput | boolean
    inform?: BoolFieldUpdateOperationsInput | boolean
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type canopyCreateManyLocationInput = {
    id?: number
    manage_number: string
    class_number: string
    buyer_id?: number | null
    status_fold?: boolean | null
    status_motor?: boolean | null
    status_led?: boolean | null
    status_sound?: boolean | null
    status_inform?: boolean | null
    status_temperature?: number | null
    status_transmit?: boolean | null
  }

  export type canopyUpdateWithoutLocationInput = {
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    buyer?: buyerUpdateOneWithoutCanopyNestedInput
    control?: controlUpdateManyWithoutCanopyNestedInput
  }

  export type canopyUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
    control?: controlUncheckedUpdateManyWithoutCanopyNestedInput
  }

  export type canopyUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    manage_number?: StringFieldUpdateOperationsInput | string
    class_number?: StringFieldUpdateOperationsInput | string
    buyer_id?: NullableIntFieldUpdateOperationsInput | number | null
    status_fold?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_motor?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_led?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_sound?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_inform?: NullableBoolFieldUpdateOperationsInput | boolean | null
    status_temperature?: NullableFloatFieldUpdateOperationsInput | number | null
    status_transmit?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BuyerCountOutputTypeDefaultArgs instead
     */
    export type BuyerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BuyerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CanopyCountOutputTypeDefaultArgs instead
     */
    export type CanopyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CanopyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use adminDefaultArgs instead
     */
    export type adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = adminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use buyerDefaultArgs instead
     */
    export type buyerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = buyerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use canopyDefaultArgs instead
     */
    export type canopyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = canopyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use controlDefaultArgs instead
     */
    export type controlArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = controlDefaultArgs<ExtArgs>
    /**
     * @deprecated Use locationDefaultArgs instead
     */
    export type locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = locationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}